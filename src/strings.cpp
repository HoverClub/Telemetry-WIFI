// file containing strings used by telemetry code

// NOTE - most of this stuff could be moved to the file system rather than prog memory to save space

// NOTE - if using a template processor for HTML make sure that % are doubled %% as they are used to recognise replacements!!!



#include <pgmspace.h>


// index.html for webserver v1.1 HTML supporting chunked transfers for logging!
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
	<head>
	<meta charset="utf-8"/>
	<meta name=viewport content="width=device-width, initial-scale=1" >
	<link rel="icon" href="data:,">
	<title>Hovercraft Telemetry system</title>
	<style>
    html {font-family: Arial; display: inline-block; }
    p { font-size: 1.1rem;}
    body {margin: 0;}
		progress{margin: 0 10px 6px 10px;background-color:lightgrey;border-radius: 4px;box-shadow: 0 3px 6px;}
    .center {text-align: center;}
		.topnav { overflow: hidden; background-color: #50B8B4; color: white; font-size: 1rem;}
    .content { padding: 10px; }
		.heading {font-size:1em;letter-spacing: .5px;font-weight:bold;text-align: center;}
		#pthrust{ width: 380px;height: 20px;border: 3px solid #0cc;border-radius: 10px;}
		.button {background-color:gray;margin:8px;border:none;border-radius:5px;color:white;padding:10px 30px;text-align:center;text-decoration:none;display:inline-block;font-size: 16px;cursor: pointer;font-family: Sans;}
		.button:hover{background-color:slategray;}
		.ct-series-a .ct-line, .ct-series-a .ct-point {stroke: blue;stroke-width:2px;}
		.ct-series-b .ct-line, .ct-series-b .ct-point {stroke: green;stroke-width:2px;}
		.ct-series-c .ct-line, .ct-series-c .ct-point {stroke: red;stroke-width:2px;}
		.himg {vertical-align:middle;margin: 5px 30px;}
		.timg {display: inline-block;vertical-align:middle;width:195px;margin: 5px 30px;}
	</style>
	</head>
	<body>
		<div class="topnav center">
			<h1>Hovercraft Telemetry System</h1>
		</div>

		<form enctype="multipart/form-data" action="" method="post">
			<div class="content">
				<div style="font-size: small"><span id="debug1"></span><br/><span id="debug2"></span><br/><span id="debug3"></span></div>
				<p style="font-size: small">v2.9  &#169; John Robertson 2022</p>			
				<div id="cal" class="heading" style="display:none;">Please wait, calibrating <span id="stype"></span> ...</div>
				<div id="all" class="center">
					<div>
						<div style="display:inline-block;vertical-align: top;">
	<!-- 	
	Safari stops execution on the page when a file download is started - this fixes it by redirecting to home AFTER the download req. 
	If we redirect immediately, the download req may not have been ack'ed so a delay is used (user will be confirming the	download!) 
	
	This works in Safari but adds a 4sec delay - AND if the user hasn't elected to save the file before the delay expires the download is aborted !!!
		<a class="button" style="background-color:green;" id="logon" download onclick="location.assign('/logon'); setTimeout(function(){location.assign('http://10.1.1.1');}, 4000) ;return false;">Start Logging</a>

	This detects Safari and adds the redirect if needed
		<a class="button" style="background-color:green;" id="logon" download onclick="location.assign('/logon'); if (navigator.userAgent.indexOf('Safari') != -1 ) {setTimeout(function(){location.assign('http://10.1.1.1');}, 4000)} ;return false;">Start Logging</a>

	Works in newer Chrome and Firefox, etc. and is simple! - look at logon.onclick javascrip function below to see how it's handled for Safari!
		<a href="/logon" class="button" style="background-color:green;" id="logon" download >Start Logging</a>

	This usees the href to navigate nowhere AFTER the file download has been started by the javascript - doesn't work on Safari
		<a href="#0" class="button" style="background-color:green;" id="logon" download onclick="location.assign('/logon');">Start Logging</a>
	
	-->
							<a class="button" style="background-color:green;" id="logon" href="/logon" download>Start Logging</a>
							
							<button class="button" type="submit" style="background-color:red;display:none;" id="logoff" name="logoff">Stop Logging</button>
						</div>
						<div style="display:inline-block;vertical-align:top;font-size:small;">
							<div id="cam" style="display:none;">
								<div style="display:block;">
									<span>Camera space avail.</span><span id="cammem"></span>GB<br>
								</div>
								<div style="display:block;">
									<span>Battery:</span><span id="cambat"></span>%<br>
								</div>
								<div style="display:block;">
									<span id="vidfile"></span><br>
								</div>
							</div>
							<div style="display:block;">
								GPS is <span id="gps"></span>
							</div>
						</div>
						<div style="display:inline-block;vertical-align: top;font-size:small;display:none;" id="logtime">
							Log time <span id="ltime"></span>
						</div>
					</div>
					<div id="hide">
						<div id="thrust" class="heading" style="display: none;">
							<div>
								<span id="thrustval"></span>lbf
							</div>
							<meter id="pthrust" value="0" max="450"></meter>
						</div>
						<div class="center">
							<div id="caption" style="font-size:1.5em; margin:10px; text-align:center;"></div>
							<svg id="chart" style="width:800px;height:400px;" viewBox="0 0 800 400" xmlns="http://www.w3.org/2000/svg">
								<g id="chart-data"></g>
							</svg>
							<div id="legend" style="font-size:1em; margin:10px; text-align:center;"></div>
							<div>Tap chart to pause</div>
						</div>
						<div>
							<button class="button" id="pchart">Pause chart</button>
							<button type="submit" class="button" name="pcal">Calibrate Press.</button>
							<button type="submit" class="button" name="acal">Calibrate Accel.</button>
							<button type="submit" class="button" style="background-color:red;" name="rst" onclick="return confirm('Are you sure you want to reset the system?');">System Reset</button>
							<button type="submit" class="button" style="background-color:blue;" name="about">About</button>
						</div>
						<div>
							<span id="rollt" style="width:100px;" class="timg"></span>
							<span id="pitcht" class="timg"></span>
							<span id="yawt" class="timg"></span>
						</div>
						<div>
							<img id="roll" class="himg" style="transform: rotate(0deg);" src="hover_rear.png" alt="hover_rear"/>
							<img id="pitch" class="himg" style="transform: rotate(0deg);" src="hover_side.png" alt="hover_side" />
							<img id="yaw" class="himg" style="transform: rotate(0deg);" src="hover_top.png" alt="hover_top" />
						</div>
					</div>
				</div>
			</div>
		</form>
		
		<script>

			window.onpageshow = function(event) {
					if (event.persisted) {
							window.location.reload() 
					}
			};

			var debug = false; // set true to show SSE data on page
			var paused = false;
	
			// html elements
			var cal = document.getElementById("cal");
			var stype = document.getElementById("stype");
			var all = document.getElementById("all");
			var cam = document.getElementById("cam");
			var cambat = document.getElementById("cambat");
			var cammem = document.getElementById("cammem");
			var vidfile = document.getElementById("vidfile");
			var gps = document.getElementById("gps");
			var hide = document.getElementById("hide");
			var logon = document.getElementById("logon");
			var logoff = document.getElementById("logoff");
			var ltime = document.getElementById("ltime");
			var thrust = document.getElementById("thrust");
			var thrustval = document.getElementById("thrustval");
			var pthrust = document.getElementById("pthrust");
			var pitch = document.getElementById("pitch");
			var roll = document.getElementById("roll");
			var yaw = document.getElementById("yaw");
			var tpitch = document.getElementById("tpitch");
			var troll = document.getElementById("troll");
			var tyaw = document.getElementById("tyaw");

			logon.onclick = function(){
				if ((navigator.userAgent.indexOf('Safari/') != -1) && (navigator.userAgent.indexOf('Chrome/') == -1) && (navigator.userAgent.indexOf('Chromium/') == -1) )  // if Safari
				{
					location.assign('/logon');
					setTimeout(function(){location.assign('http://10.1.1.1');}, 4000);	// 4 secs before reloading page!
					return false;
				}
				else
					return true; // do normal download for all other browsers
			}

			// CHART SETUP STUFF
			const minVal = -500; // min input value 
			const maxVal = 2000; // max input value
			const YtickStep = 250; // Y axis tick marker steps (in max/minVal units), 0 = no Y axis marks
			const XtickDiv = 4; // X axis tick marker divisor (0 = no marks, 1 = every data point, 2 = every 2nd point, etc.
			const title = 'Cushion Pressures (Pa)'; // title included in caption
			const maxSeriesLen = 128; // maximum points along Xaxis

			// 'Ycoord' stores the scaled data point heights
			// 'Xcoord' stores the X axis position for point set
			// graph types are 'line', 'point' or 'linepoint'
			// types, labels, colors and line widths for each series set by you!
			var data = {
					types: 		['line','line','line'],		// series type (line, point or linepoint
					labels: 	['Bag', 'Bow', 'Cushion'],// labels appear below graph
					colors: 	['red', 'green', 'blue'],	// line (and point) colors
					widths: 	[1, 1, 1], 								// line width in px (points are scaled to twice the line width)
					
					// data below here is used by code at runtime!
					Ycoord: 		[],		// set of arrays of X posn of each data point in each series ([Xseries0,Xseries1,Xseries2],[Xseries0,Xseries1,Xseries2], etc)  
					Xcoord:			[],		// array of Xpoints (left)
					
					markElement:[],		// array of markers for each point series
					markURL:		[],
				};

				
			const chart = document.getElementById("chart"); // main chart container
			const chartData = document.getElementById("chart-data"); // data series patch, etc

			const chartWidth = chart.style.width.replace(/\D/g,'');
			const chartHeight = chart.style.height.replace(/\D/g,'')
			const Xoffset = 50; // graph elements offset to right to make space for Y axis & labels
			const Xtick = (chartWidth - Xoffset) / maxSeriesLen; // scale X tick along chart width

			// to avoid multipication calc in script fill array with preset X axis step position
			data.Xcoord = Array(maxSeriesLen).fill().map((item, index) => (Math.round(index * Xtick)) + Xoffset);

			var seriesCount = data.types.length; // # of data series

			// make a marker for each series if required
			for (let series=0; series < seriesCount; series++)
			{
				data.markElement[series] = "";
				data.markURL[series] = "";
				if (data.types[series] == "linepoint" || data.types[series] == "point") // only if required!
				{
					let mwidth = data.widths[series];
					data.markElement[series] = `
				<marker id="mark${series}" viewBox="0 0 ${mwidth * 2} ${mwidth * 2}" refX="${mwidth}" refY="${mwidth}"
						 markerWidth="${mwidth * 2}" markerHeight="${mwidth * 2}">
					<circle id="circle${series}" cx="${mwidth}" cy="${mwidth}" r="${mwidth}" fill="${data.colors[series]}" />
					</marker>`;
					data.markURL[series] = `marker-mid="url(#mark${series})"`;
				}
			}

			// scale value to fit Y axis (0 - chartHeight) AND invert to make Y increase up screen instead of downscreen with svg
			const scale = function (num) { return (num - maxVal) * chartHeight / (minVal - maxVal)};

			let chartGridInner =`
				<g style="text-anchor: end;">`;
			// X axis
			if (YtickStep > 0)
			{ // Y axis
				for (let step = minVal; step < maxVal; step += YtickStep)
					chartGridInner += `
						<line x1="${Xoffset}" x2="${chartWidth}" y1="${scale(step)}" y2="${scale(step)}" stroke="lightgrey" stroke-width="1"></line>
						<text x="${Xoffset-8}" y="${scale(step)}">${step}</text>`;
			}
			if (XtickDiv > 0)
			{ // X axis
				for (let step = Xoffset; step < chartWidth; step += Xtick * XtickDiv)
					chartGridInner += `
						<line x1="${step}" x2="${step}" y1="0" y2="${chartHeight}" stroke="${step == Xoffset ? "grey" : "lightgrey"}" stroke-width="${step == Xoffset ? 3 : 1}"></line>
						`;
			}
			chart.insertAdjacentHTML("beforeend", chartGridInner + `
			</g>`);

			// add title above and legend below
			document.getElementById("caption").innerHTML = '<span>' + title + '</span>';
			var text = "";
			for (let i = 0; i < data.labels.length; i++)
				text += `<span style="color:${data.colors[i]};">&nbsp;${data.labels[i]} &#9608; </span>`;
			document.getElementById("legend").innerHTML = text + " Tap to pause.";


			// pass an array of values, one for each series in the chart
			// adds them to chart display removing the oldest if points>maxSeriesLen
			const addPoints = function(points)
			{
				var scaledPoints = points;
				
				// if too many points then remove the oldest first
				if (data.Ycoord.length >= maxSeriesLen) // too many points already?
					data.Ycoord.shift();// remove oldest point set at start of chart

				//add new points to data array
				while (scaledPoints.length < seriesCount)
					scaledPoints.push(0); // pad any missing series values with zero
				
				for (let i=0; i < seriesCount; i++)
					scaledPoints[i] = Math.round(scale(scaledPoints[i])); // next data point height
				data.Ycoord.push(scaledPoints); // add new chart values

				// add new path element to svg for each data series
				let allInnerElements = "";
				for (let series=0; series < seriesCount; series++)
				{
					if (data.types[series] == "point")
					{
						for (y = 1; y < data.Ycoord.length; y++)
							allInnerElements += `
					<circle id="circle${series}" cx="${data.Xcoord[y]}" cy="${data.Ycoord[y][series]}" r="${data.widths[series] * 2}" fill="${data.colors[series]}" />`;
					}
					else
					{
						// add line path
						allInnerElements += `${data.markElement[series]}
							<path ${data.markURL[series]} d="M${data.Xcoord[0]} ${data.Ycoord[0][series]} L`;
						for (y = 1; y < data.Ycoord.length; y++)
							allInnerElements += `${data.Xcoord[y]} ${data.Ycoord[y][series]} `;
						allInnerElements += `"  stroke="${data.colors[series]}" stroke-width="${data.widths[series]}" fill="none"/>
						`;
					}
				}
				chartData.textContent = ''; // allegedly the fastest way to remove all child elements!
				chartData.insertAdjacentHTML("beforeend", allInnerElements);
			}


      // SSE handler
			if(typeof(EventSource) !== "undefined") {
				// Server-sent events support!
				if (!!window.EventSource) {
					var source = new EventSource('/events');

					source.addEventListener('open', function(e) {
					console.log("Events Connected");
					}, false);

					source.addEventListener('error', function(e) {
						if (e.target.readyState != EventSource.OPEN)
							console.log("Events Disconnected");
					}, false);

					source.addEventListener('message', function(e) {
						console.log("message", e.data);
					}, false);

					source.addEventListener('error', function(e) {
						console.log("message", e.data);
					}, false);

					// data is returned as a comma delimited string
					// with status added to start sensor data
					source.addEventListener('data', function(e) 
						{
							var start = new Date().getTime();

							var lines = e.data.split('|'); // get csv lines to an array of lines
	
							for (let i=0; i < lines.length; i++)
							{
								if (lines[i].length == 0)
									continue; // empty line!
		
								if (debug) 
									document.getElementById("debug2").innerHTML = lines[i];
								
								var res = lines[i].split(","); // get csv to array

								// disable all event-based elements during calibration and thrust, chart, calibrate, 
								// download, delete, etc. during logging.
								// When calibrating, ESP only sends calMode.  When logging, only calmode, logmode, mem/freespace and timer are sent.
								// data string received:
								//
								// 		Idle:		"0, camBat, camMem, GPSstatus, thrust, lastVidFilename, logTime, bag, bow, cush pressure, accel_X, accel_Y, accel_Z, gps_lat, gps_long, gps_speed, gps_time
								//
								// 		Calibrating: 		"1 or 2,"
								//
								// 		Logging: "3, cambat, cammem, gpsStat, logtime"
								//
								// Mode: 0 = idle, 1 = Press cal, 2 = Accel cal, 3 = logging active
								// > 128 debug active (outputs extra info on page)
								
								var mode = parseInt(res[0], 10);
								if (mode >=128)
								{
									debug = true;
									mode = mode - 128;
								}
								else
										debug = false;
			
								if (mode == 1 || mode == 2) // calModes?
								{
									cal.style.display="block"; 
									stype.innerHTML = mode == 1 ? "Pressure Sensors" : "Accelerometer";
									all.style.display = "none"; // hide everything for now
								}
								else
								{
									cal.style.display="none"; 
									all.style.display = "block";

									if (res[1] == 0) // camera present?
										cam.style.display="none";
									else
									{
										cam.style.display="block";
										cambat.innerHTML = res[1];
										cammem.innerHTML = res[2];
										vidfile.innerHTML = (mode == 0 ? "Last file: " + res[5] : ""); // show flename at idle only
									}
									
									gps.innerHTML = res[3]==1 ? " active" : " not locked";
				
									if (mode == 3)			// logMode
									{
										hide.style.display = "none"; // hide chart and thrust stuff during logging
										logon.style.display = "none";
										logoff.style.display = "block";
										logtime.style.display = "block";
										var d, h, m, s;
										s = Math.floor(res[4] / 1000);
										m = Math.floor(s / 60);
										s = s % 60;
										h = Math.floor(m / 60);
										m = m % 60;
										d = Math.floor(h / 24);
										h = h % 24;
										h += d * 24;
										ltime.innerHTML = (h < 10 ? "0" + h : h) + ":" + (m < 10 ? "0" + m : m) + ":" + (s < 10 ? "0" + s : s);  // seconds expired
									}
									else // not logging so show chart and other buttons
									{
										hide.style.display = "block"; // show chart and thrust stuff again
										logon.style.display = "block";
										logoff.style.display = "none";
										logtime.style.display = "none";

										if (res[4] === "") // any thrust valid?
											thrust.style.display = "none";
										else
										{
											thrust.style.display = "block";
											thrustval.innerHTML = res[4];
											pthrust.value = parseFloat(res[4]);
										}

										// add new pressure values to chart arrays
										if (!paused) // don't update chart if paused
											addPoints([parseFloat(res[7]), parseFloat(res[8]), parseFloat(res[9])]);

										// update pitch roll rotation
										pitcht.innerHTML = res[10];
										rollt.innerHTML = res[11];
										yawt.innerHTML = (res[12] * -1);
										pitch.style.transform = "rotate(" + res[10] + "deg)";
										roll.style.transform = "rotate(" + res[11] + "deg)";
										yaw.style.transform = "rotate(" + (res[12] * -1) + "deg)";
									}
								}
							}
							if (debug)
								document.getElementById("debug3").innerHTML = "Chart update time: " + (new Date().getTime() - start) + " Ms";
						}
					, false);
				}
			} else {
					alert("Sorry - your Web Browser doesn\'t support server-sent-events ...");
			}  
			
			pchart.onclick = function(){  // pause chart scrolling
				return togglePause();
			};

			chart.onclick = function(){  // pause chart scrolling
				return togglePause();
			};
			
			togglePause = function(){
				paused = !paused;
				if (paused)
				{
					pchart.innerHTML = "Restart Chart";
					pchart.style.backgroundColor = "darkred";
				}	else {
					pchart.innerHTML = "Pause Chart";
					pchart.style.backgroundColor = "gray";
				}
				return false; // stop button posting form!
			};
	
		</script>
	</body>
</html>

)rawliteral";


const char reset_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
	<head>
	<meta charset="utf-8"/>
	<meta name=viewport content="width=device-width, initial-scale=1" >
	<link rel="icon" href="data:,">
	<title>Hovercraft Telemetry system</title>
	<style>
    html {font-family: Arial; display: inline-block; }
    p { font-size: 1.1rem;}
    body {margin: 0;}
    .topnav { overflow: hidden; background-color: #50B8B4; color: white; font-size: 1rem; text-align: center;}
    .content { padding: 10px; }
		.heading {font-size:1em;letter-spacing: .5px;font-weight:bold;text-align:center;}
		.button {background-color:gray;margin:8px;border:none;border-radius:5px;color:white;padding:10px 30px;text-align:center;text-decoration:none;display:inline-block;font-size: 16px;cursor: pointer;font-family: Sans;}
	</style>
	</head>
	<body>
		<div class="topnav">
			<h1>Hovercraft Telemetry System</h1>
		</div>

		<div class="content">
			<p style="font-size: small">v2.5  &#169; John Robertson 2021<p>			
			<div class="heading" >Please wait, system resetting (can take 30 seconds).</div>
			<div id="res" class="heading" style="display:none;"> 
				<br/>Reset completed - reconnect WiFi now. <a href="http://10.1.1.1" class="button">Home</a>
			</div>
		</div>
		<script>
		window.setTimeout(function(){document.getElementById("res").style.display="block";}, 45000);
	</script>
	</body>
</html>
)rawliteral";


const char about_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
	<head>
	<meta charset="utf-8"/>
	<meta name=viewport content="width=device-width, initial-scale=1" >
	<link rel="icon" href="data:,">
	<title>Hovercraft Telemetry system</title>
	<style>
    html {font-family: Arial; display: inline-block; }
    p { font-size: 1.1rem;}
    body {margin: 0;}
	  .center {text-align: center;}
		.topnav { overflow: hidden; background-color: #50B8B4; color: white; font-size: 1rem;}
    .content { padding: 10px; }
		.heading {font-size:1em;letter-spacing: .5px;font-weight:bold;text-align: center;}
		.button {background-color:gray;margin:8px;border:none;border-radius:5px;color:white;padding:10px 30px;text-align:center;text-decoration:none;display:inline-block;font-size: 16px;cursor: .button:hover{background-color:slategray;}
	</style>
	</head>
	<body>
		<div class="topnav center">
			<h1>Hovercraft Telemetry System</h1>
		</div>

		<div class="content">
			<div style="font-size: small"><span id="debug1"></span><br/><span id="debug2"></span><br/><span id="debug3"></span></div>
			<p style="font-size: small">v2.9  &#169; John Robertson 2022</p>			

			<p>This device supplies reaal time data via WiFi from various sensorsL: pressure (3 x MXPV67002 +/-2KPa sensors), XYZ accelerometer & gyro (MPU6050) and a GPS module.  Log data can be read (and saved) via this web page (download) OR via the USB serial interface (@ 115200baud).  Data sampling rate is 50Hz (0.3Hz on the serial interface).  An optional load cell can also be connected to read thrust - it isn't logged but displayed in real time.  Any of the connected devices (web page, serial port) can stream data independently.
			</p>

			<p>During calibration, logging is disabled on all devices - also make sure the unit box is flat (use the bubble level on top), oriented correctly (front, l/r, etc.) and that the pressure sensors are only subjected to ambient pressure!  Calibration values are saved between power cycles.</p>
			
			<p>The web page is available at IP address 10.1.1.1:80  This device also uses a TelNet port on 7878 to control an optional Xaomi Yi camera (video recording is turned on/off with Logging).  Note that the camera must be turned on and WiFi enabled (camera side button) BEFORE this device is powered up or reset (so it can connect to the camera).</p>
			
			<p>Data is CSV formattted:<br/>
			<i>  Sample time (mSec)<br>  Bow pressure (Pa)<br>  Bag<br>  Cushion<br>  Pitch (raw accelerometer value)<br>  Roll<br>  Yaw<br>  Latitude<br>  Longitude<br>  Speed (100ths of a knot)<br>  Time (HHMMSS)</i><br/>
			It can be uploaded and viewed interactively here: <a href="http://cirtech.co.uk/viewer/plotter.php">http://cirtech.co.uk/viewer/plotter.php</a></p>

			<div>
				<a href="http://10.1.1.1" class="button">Back</a>
			</div>
				
		</div>
	</body>
</html>
)rawliteral";


// text version of index.html sent via Serial
const char help[] PROGMEM = R"rawliteral(
		Hovercraft Telemetry v2.8
		-------------------------

(c) John Robertson 2021

This device supplies data via WiFi from sensors - pressure (3 x MXPV67002 2KPa 
sensors), XYZ accelerometer (MPU6050) and a GPS module.  Log data can be read 
(and saved) via this web page (download) OR via a USB serial interface 
(@ 115200baud).  Data sampling rate is 20Hz (0.3Hz on the serial interface).
An optional load cell can be connected to read thrust - not logged but 
displayed in real time.  Either of the connected devices (web page, serial 
port) can stream data independently.  Multiple WiFi devices can also stream
simultaneously.
	
Serial interface commands:
'L' Starts and stops logging
'P' Calibrates pressure sensor
'A' to calibrate accelerometer & gyro 
'D' to turn on/off Web debug info (also available at 10.1.1.1/?debug)
'?' to display help screen via USB
'R' to reset the system
' ' <space> show current sensor values

During calibration, logging is disabled on all devices - also make 
sure the unit box is flat (use the bubble level), oriented correctly and that 
the pressure sensors are only subjected to ambient pressure!  Calibration 
values are saved between power cycles.
			
The web page is available at IP address 10.1.1.1:80.  A TelNet port on 7878 is
used by this device to control an optional Xaomi Yi camera (video recording is 
automatically turned on/off when logging is started/stopped). Note that the 
camera must be turned on and WiFi enabled (side button) BEFORE this device is 
powered up or reset (so it can connect to the camera).
			
Data is CSV formattted:
	Sample time (mSec)
	Bow pressure (Pa)
	Bag  
	Cushion
	Pitch (raw accelerometer value)
	Roll  
	Yaw  
	Latitude  
	Longitude  
	Speed (in 100ths of a knot)
	Time (HHMMSS)

Data can be uploaded and viewed at http://cirtech.co.uk/viewer/plotter.php

)rawliteral";


const unsigned char hover_top[] = {
0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 
0x00, 0x00, 0x00, 0xC3, 0x00, 0x00, 0x00, 0x50, 0x08, 0x03, 0x00, 0x00, 0x00, 0x93, 0x53, 0x31, 
0x75, 0x00, 0x00, 0x02, 0x5B, 0x50, 0x4C, 0x54, 0x45, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x47, 
0x47, 0x47, 0xC9, 0xC9, 0xC9, 0x91, 0x91, 0x91, 0x23, 0x23, 0x23, 0x23, 0x24, 0xE9, 0x4B, 0x4E, 
0xD6, 0x4D, 0x4B, 0xDA, 0xD0, 0xD1, 0xD1, 0xAA, 0xAA, 0xAA, 0xD4, 0xD4, 0xD9, 0x19, 0x19, 0x19, 
0x39, 0x39, 0x39, 0x24, 0x24, 0x28, 0x25, 0x25, 0xE3, 0x70, 0x70, 0x70, 0xBD, 0xBD, 0xBD, 0x33, 
0x33, 0x33, 0x3A, 0x3A, 0x3A, 0x97, 0x97, 0xA0, 0x56, 0x56, 0x56, 0x92, 0x92, 0x92, 0xA4, 0xA4, 
0xA4, 0x92, 0x92, 0x92, 0x1D, 0x1D, 0x1D, 0x63, 0x63, 0x63, 0x8B, 0x8B, 0x8B, 0x98, 0x98, 0x98, 
0x33, 0x33, 0x37, 0x1E, 0x1E, 0x5D, 0x07, 0x07, 0x0E, 0x4B, 0x4B, 0x4B, 0x27, 0x27, 0x27, 0x55, 
0x55, 0x55, 0x5A, 0x5A, 0x5A, 0x42, 0x3F, 0xDE, 0x1E, 0x1E, 0x22, 0x89, 0x89, 0x89, 0x62, 0x62, 
0x62, 0x77, 0x77, 0x77, 0x55, 0x55, 0x55, 0xA1, 0xA1, 0xA1, 0xBD, 0xBD, 0xBD, 0xC4, 0xC4, 0xC4, 
0x41, 0x41, 0x41, 0x78, 0x78, 0x78, 0x49, 0x49, 0x49, 0x79, 0x79, 0x79, 0x85, 0x85, 0x85, 0xBA, 
0xBB, 0xE5, 0x5B, 0x5B, 0x5B, 0x41, 0x41, 0x41, 0x85, 0x85, 0xD8, 0x8A, 0x8A, 0x8A, 0xDB, 0xDA, 
0xE3, 0xD3, 0xD3, 0xD3, 0x22, 0x1F, 0xDD, 0x14, 0x14, 0x14, 0x2E, 0x2C, 0xCA, 0x28, 0x28, 0xD6, 
0x0F, 0x0F, 0xC0, 0x55, 0x52, 0xD0, 0x1C, 0x1C, 0x1C, 0x45, 0x45, 0x45, 0x23, 0x24, 0xE6, 0x69, 
0x6A, 0xAB, 0x52, 0x52, 0x52, 0x68, 0x68, 0x68, 0x8D, 0x8B, 0xDD, 0xD0, 0xD0, 0xD0, 0x5E, 0x5F, 
0xD6, 0x40, 0x41, 0xBC, 0x73, 0x72, 0xD6, 0xCC, 0xD2, 0xF0, 0xDB, 0xDD, 0xE7, 0xAD, 0xAD, 0xAD, 
0x3C, 0x3C, 0xCC, 0x60, 0x60, 0x60, 0x28, 0x28, 0x28, 0x1B, 0x1B, 0x63, 0x1B, 0x1D, 0x62, 0x5E, 
0x5F, 0xCE, 0x76, 0x73, 0xDB, 0x70, 0x70, 0xDE, 0x33, 0x33, 0x33, 0xAF, 0xAF, 0xAF, 0x9C, 0x9C, 
0x9C, 0xB1, 0xB1, 0xB1, 0xC1, 0xC1, 0xC1, 0x65, 0x65, 0xD4, 0x67, 0x67, 0x67, 0xFF, 0xFF, 0xFF, 
0xFD, 0xFE, 0xFE, 0x02, 0x02, 0x02, 0xFA, 0xFA, 0xFA, 0x00, 0x01, 0xFE, 0x07, 0x07, 0xF8, 0x14, 
0x14, 0x14, 0x49, 0x4A, 0xEE, 0xD8, 0xD8, 0xD8, 0x0B, 0x0B, 0x0B, 0x07, 0x07, 0x07, 0xBF, 0xC1, 
0xF2, 0x21, 0x21, 0x21, 0xF6, 0xF6, 0xF6, 0xBF, 0xBF, 0xBF, 0xA6, 0xA6, 0xA6, 0xC0, 0xC0, 0xC0, 
0x48, 0x48, 0x48, 0xC1, 0xC1, 0xF2, 0x80, 0x80, 0x80, 0x5F, 0x5F, 0x5F, 0x2E, 0x2E, 0x2E, 0xB5, 
0xB5, 0xB5, 0xDC, 0xDC, 0xDC, 0x01, 0x01, 0xFC, 0x10, 0x10, 0x11, 0x56, 0x56, 0x56, 0x55, 0x55, 
0x55, 0x29, 0x29, 0x29, 0xE9, 0xE9, 0xE9, 0xED, 0xED, 0xEE, 0xFC, 0xFC, 0xFC, 0x0F, 0x0F, 0x0F, 
0x18, 0x18, 0x18, 0xD2, 0xD2, 0xD2, 0xB0, 0xB0, 0xB0, 0x05, 0x04, 0xF7, 0x02, 0x02, 0xF4, 0xF0, 
0xF0, 0xF0, 0xEB, 0xEB, 0xEB, 0x1B, 0x1B, 0x1C, 0x46, 0x46, 0x46, 0x24, 0x24, 0x24, 0x82, 0x82, 
0x82, 0xE3, 0xE3, 0xE3, 0x34, 0x34, 0x34, 0xF4, 0xF4, 0xF4, 0xD0, 0xD0, 0xD0, 0xCD, 0xCD, 0xCD, 
0xB3, 0xB3, 0xB3, 0x52, 0x52, 0x52, 0x39, 0x39, 0x39, 0xF2, 0xF2, 0xF2, 0xAC, 0xAC, 0xAC, 0x78, 
0x78, 0x78, 0xDA, 0xDA, 0xDA, 0xD5, 0xD5, 0xD5, 0xE0, 0xE0, 0xE0, 0x47, 0x47, 0xEB, 0xBC, 0xBC, 
0xBC, 0x9E, 0x9E, 0x9E, 0x90, 0x90, 0x90, 0x86, 0x86, 0x86, 0x2B, 0x2B, 0x2C, 0x1E, 0x1E, 0x1E, 
0xCA, 0xCA, 0xCA, 0x07, 0x07, 0xB5, 0xA2, 0xA2, 0xA2, 0x74, 0x74, 0x74, 0x4E, 0x4E, 0x4F, 0x41, 
0x41, 0x41, 0x07, 0x08, 0xF5, 0xE7, 0xE7, 0xE7, 0xC5, 0xC5, 0xC5, 0x1B, 0x1A, 0xC5, 0x8D, 0x8D, 
0x8D, 0x6F, 0x6F, 0x6F, 0x6C, 0x6C, 0x6C, 0x94, 0x94, 0x94, 0x8A, 0x8A, 0x8B, 0x08, 0x08, 0x48, 
0x5B, 0x5B, 0x5B, 0x3D, 0x3D, 0xE3, 0x35, 0x34, 0xDC, 0xA2, 0xA2, 0xD7, 0x7D, 0x7D, 0x7D, 0x63, 
0x63, 0x64, 0x12, 0x12, 0x52, 0x3C, 0x3C, 0x3D, 0x0E, 0x0E, 0xBB, 0x97, 0x97, 0x97, 0x69, 0x69, 
0x69, 0x66, 0x66, 0x66, 0x4B, 0x4B, 0x4B, 0xC7, 0xC7, 0xC7, 0x85, 0x86, 0xBD, 0x04, 0x03, 0xB1, 
0x05, 0x05, 0xEE, 0xBA, 0xBB, 0xED, 0x12, 0x10, 0xE8, 0xB1, 0xB2, 0xE5, 0x26, 0x26, 0xCF, 0xB7, 
0xB7, 0xB7, 0x60, 0x61, 0x9B, 0x4D, 0x4D, 0x8A, 0x41, 0x42, 0x7E, 0x94, 0x95, 0xCA, 0x3A, 0x3A, 
0x77, 0x2C, 0x2C, 0x69, 0xBF, 0x2F, 0xED, 0x97, 0x00, 0x00, 0x00, 0x5C, 0x74, 0x52, 0x4E, 0x53, 
0x00, 0x42, 0xFB, 0x18, 0xC2, 0xFD, 0xD3, 0x58, 0x58, 0x0C, 0x2E, 0x1C, 0xFB, 0xEC, 0xFC, 0xD3, 
0xA5, 0x06, 0xF0, 0xDD, 0x17, 0xC3, 0x8E, 0x86, 0x41, 0xF8, 0xDD, 0x6F, 0x37, 0x18, 0xFE, 0xFE, 
0xF7, 0xF4, 0xE5, 0xDA, 0xD2, 0xC2, 0xB4, 0xAD, 0x9D, 0x87, 0x69, 0x54, 0x30, 0xF7, 0xD5, 0xBA, 
0xB9, 0x9B, 0x91, 0x71, 0x6D, 0x5D, 0x5A, 0x57, 0x28, 0xFE, 0xF8, 0xF6, 0xF5, 0xF5, 0xEF, 0xEC, 
0xD8, 0xD7, 0xD7, 0xD5, 0xC5, 0x8F, 0x70, 0x67, 0x67, 0x55, 0x53, 0x44, 0x43, 0xFB, 0xF9, 0xE5, 
0xD7, 0xD7, 0xD6, 0xD2, 0xC9, 0xC2, 0xC0, 0xBF, 0x97, 0x8E, 0x8A, 0x4F, 0xDD, 0xD2, 0x8A, 0x05, 
0x00, 0x00, 0x09, 0x4F, 0x49, 0x44, 0x41, 0x54, 0x68, 0xDE, 0xD5, 0x9B, 0x85, 0x9F, 0xD2, 0x50, 
0x1C, 0xC0, 0x6D, 0xC5, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xAE, 0xC7, 0x74, 0xF2, 0x26, 0x13, 
0x14, 0x50, 0x87, 0x83, 0x0D, 0x63, 0xB7, 0x21, 0x5D, 0x07, 0x22, 0x77, 0xA0, 0x77, 0x78, 0x76, 
0x77, 0x77, 0xFE, 0x59, 0xBE, 0xB7, 0xA1, 0xA8, 0x18, 0x1F, 0x65, 0xF0, 0x71, 0xDF, 0x3B, 0x3E, 
0x6C, 0xBB, 0xCF, 0x6D, 0xEF, 0xCB, 0x8B, 0xDF, 0x2B, 0xEA, 0xFD, 0x1B, 0xBA, 0xE6, 0x5D, 0xEB, 
0x97, 0x9B, 0xAE, 0x23, 0xDB, 0xD5, 0x53, 0x8B, 0x16, 0x23, 0x7A, 0x4C, 0x18, 0xD6, 0x29, 0xD4, 
0xA0, 0xDC, 0xAC, 0xDE, 0xDC, 0x42, 0x1D, 0x81, 0xA9, 0x8B, 0xB7, 0x0E, 0xEE, 0x3E, 0xAA, 0x71, 
0x4B, 0x86, 0xD2, 0x97, 0x9B, 0xC6, 0x8D, 0x1A, 0xAA, 0x20, 0xA0, 0x6B, 0x31, 0x7C, 0x6C, 0x5F, 
0x5B, 0x4B, 0x1E, 0xA5, 0x9F, 0x82, 0x64, 0x39, 0x81, 0x2A, 0x39, 0xE8, 0x46, 0x76, 0x19, 0x3D, 
0xAA, 0x25, 0xA5, 0xA7, 0x78, 0x63, 0x36, 0x64, 0xB7, 0x04, 0xF7, 0x95, 0x8D, 0x37, 0xA9, 0x7B, 
0x94, 0x2A, 0x0E, 0xED, 0x26, 0x8F, 0xEE, 0x8B, 0x0D, 0xD2, 0x52, 0x8D, 0xC9, 0x5F, 0xE7, 0x10, 
0x68, 0xA2, 0x5C, 0xF8, 0x32, 0x8F, 0x48, 0x55, 0xF2, 0xA1, 0xE7, 0xB0, 0x0E, 0xDD, 0xA0, 0x9E, 
0x09, 0x3F, 0x3C, 0x9D, 0xF1, 0xD0, 0x1C, 0x00, 0x1C, 0x7A, 0xED, 0x2C, 0x03, 0xE8, 0x49, 0x95, 
0x31, 0x91, 0x77, 0x1B, 0x8B, 0x76, 0x68, 0xDE, 0x79, 0xC0, 0x1C, 0x48, 0x91, 0xD9, 0xAB, 0x4F, 
0x3C, 0x11, 0x02, 0xC8, 0xB7, 0x06, 0x65, 0x72, 0xA0, 0xFD, 0x35, 0x69, 0xB2, 0x36, 0xF5, 0xB8, 
0x58, 0x87, 0xE6, 0x6D, 0xDB, 0xF3, 0x14, 0x29, 0x5D, 0xCD, 0x08, 0xC4, 0x97, 0x8F, 0x1F, 0x94, 
0x29, 0x1F, 0xE8, 0xCC, 0x65, 0x91, 0xB4, 0x27, 0x03, 0x47, 0xB0, 0x43, 0x31, 0x01, 0x61, 0x6C, 
0x7B, 0x08, 0xD9, 0x1A, 0xB3, 0x03, 0x1B, 0x7C, 0x71, 0x00, 0x84, 0xF3, 0x90, 0xA1, 0xF4, 0xEC, 
0xBB, 0x24, 0xC2, 0xFD, 0xC9, 0x88, 0xA1, 0x38, 0x87, 0x16, 0x5D, 0xBA, 0x7B, 0x79, 0x98, 0xBD, 
0x62, 0xC0, 0xD5, 0x40, 0x81, 0x10, 0x02, 0x51, 0xD3, 0xE9, 0xDB, 0x47, 0xF6, 0x97, 0x1C, 0x29, 
0x2C, 0xEA, 0x8D, 0x55, 0x02, 0x28, 0xC6, 0x01, 0x2B, 0xF4, 0x4F, 0xA3, 0x4C, 0x48, 0xD6, 0x11, 
0x00, 0xE0, 0x1A, 0x46, 0x3B, 0xE2, 0xC7, 0x6E, 0x5F, 0xCF, 0xB2, 0x6E, 0x23, 0x09, 0x11, 0x94, 
0xAA, 0x40, 0xAA, 0x10, 0x63, 0x4D, 0x9C, 0xDB, 0x59, 0x8C, 0x03, 0x56, 0x70, 0xE9, 0xD9, 0xAB, 
0x95, 0x38, 0x13, 0xB0, 0x83, 0xE3, 0x58, 0x8D, 0xE4, 0x26, 0xA1, 0x1C, 0xA6, 0x79, 0xD6, 0xA6, 
0x2E, 0xD5, 0x2E, 0x7D, 0x01, 0xB0, 0xD6, 0x4C, 0x80, 0x22, 0x1C, 0xB0, 0xC2, 0x80, 0x34, 0x65, 
0xBC, 0x6D, 0x20, 0x80, 0x8C, 0x10, 0xB8, 0x98, 0x25, 0x51, 0x90, 0x60, 0xC4, 0x34, 0xD4, 0x93, 
0xF6, 0xB3, 0xC1, 0x60, 0xF0, 0xA0, 0x8A, 0x98, 0xAE, 0x33, 0x05, 0x0E, 0xBC, 0xDD, 0x0F, 0x8A, 
0x73, 0xA8, 0xDF, 0xA9, 0x31, 0x64, 0x2D, 0x47, 0x69, 0x2C, 0xC0, 0x45, 0x02, 0x57, 0x1F, 0xBB, 
0x21, 0x25, 0x86, 0x1F, 0xA6, 0x62, 0x5E, 0x28, 0x3E, 0x32, 0x0B, 0x3E, 0x9F, 0x8F, 0x56, 0x11, 
0x4F, 0xCC, 0xA5, 0xA7, 0x28, 0xF8, 0x0D, 0x54, 0xF1, 0x0E, 0xCD, 0xDB, 0x7A, 0x21, 0x5B, 0x65, 
0x50, 0x14, 0x9C, 0xC1, 0xEB, 0x46, 0x08, 0xC5, 0xDA, 0x94, 0xB9, 0x32, 0x13, 0x4B, 0x33, 0xD7, 
0xCF, 0xFB, 0xD4, 0x0E, 0x12, 0x0E, 0x8B, 0x0B, 0x66, 0x63, 0x27, 0xF3, 0x58, 0xAE, 0x93, 0xD0, 
0xEE, 0xDF, 0x59, 0x8C, 0x03, 0x8E, 0x0B, 0x6C, 0x55, 0xA5, 0x5C, 0x90, 0xE8, 0xF8, 0x95, 0xFD, 
0x24, 0x74, 0x87, 0x52, 0x19, 0x07, 0x9D, 0x48, 0x79, 0xF9, 0xF0, 0x59, 0x41, 0x4E, 0xBF, 0xCA, 
0x0E, 0x7C, 0xAC, 0xB2, 0x22, 0x8F, 0xE7, 0x2C, 0x0B, 0xED, 0x47, 0x77, 0xEE, 0x2C, 0xC2, 0xA1, 
0x47, 0x07, 0x9E, 0xB9, 0x74, 0x54, 0xA9, 0x0B, 0x86, 0x58, 0x35, 0x84, 0xE1, 0xAB, 0xE7, 0x1D, 
0x04, 0xA8, 0x38, 0x1D, 0x86, 0xB6, 0x94, 0x07, 0x29, 0xA8, 0xEF, 0xC0, 0x58, 0x9C, 0x3B, 0xF3, 
0x10, 0xC7, 0x8A, 0x74, 0x68, 0x57, 0x7F, 0x4C, 0x4B, 0x7E, 0x7F, 0x30, 0x22, 0x47, 0x84, 0xB8, 
0x85, 0x85, 0x46, 0x6B, 0x34, 0x41, 0x73, 0x80, 0x38, 0x6F, 0xE7, 0xC9, 0x47, 0x71, 0xA4, 0xF6, 
0xFF, 0x3B, 0x34, 0x1F, 0xD2, 0x8F, 0x97, 0xA2, 0x0E, 0x0E, 0x2B, 0x04, 0x6A, 0x58, 0xE8, 0x8E, 
0x65, 0x04, 0x9C, 0x27, 0x9E, 0x2A, 0x37, 0xFF, 0xF8, 0xA0, 0x0F, 0x68, 0x20, 0x1F, 0x74, 0x3D, 
0x3A, 0x30, 0x62, 0x95, 0x07, 0xA0, 0x1A, 0xC5, 0xC5, 0x63, 0x6E, 0xA4, 0x10, 0x90, 0x83, 0x84, 
0x10, 0x95, 0xF8, 0xEA, 0x8B, 0xE8, 0xBA, 0x06, 0x1C, 0x46, 0x2C, 0x6C, 0x4C, 0x49, 0x66, 0x02, 
0xF7, 0x8D, 0x84, 0xD3, 0x5E, 0x2A, 0x1D, 0x0B, 0xF8, 0xE4, 0x52, 0xE5, 0xBF, 0xEC, 0x62, 0xEC, 
0xE7, 0xF1, 0xF5, 0xFF, 0xDE, 0x41, 0x37, 0xAE, 0x3D, 0x64, 0x2C, 0x72, 0xC5, 0xF5, 0x1D, 0xAC, 
0x65, 0xC4, 0x4B, 0x01, 0x1A, 0x60, 0x22, 0xA6, 0x30, 0x0C, 0x9B, 0x72, 0x6D, 0xD2, 0x7F, 0xEE, 
0x30, 0x65, 0x01, 0x49, 0x49, 0x49, 0x1A, 0xFD, 0x3F, 0x97, 0xB1, 0x92, 0xE4, 0x1D, 0x14, 0x0D, 
0x30, 0x5C, 0xC2, 0x22, 0xF2, 0x77, 0x0C, 0x39, 0x85, 0xFF, 0xDC, 0xA1, 0x4B, 0x2B, 0xE8, 0xB2, 
0x24, 0x00, 0xA2, 0xE2, 0x4A, 0x35, 0xCC, 0x46, 0x9D, 0xA8, 0x02, 0x20, 0xE8, 0xE4, 0x63, 0xCA, 
0x9D, 0x72, 0x6A, 0xC2, 0x61, 0x6A, 0xDB, 0x7E, 0x50, 0x3A, 0x18, 0x91, 0x53, 0x7D, 0x84, 0x49, 
0x9F, 0x3C, 0x44, 0x28, 0xA3, 0x06, 0xC7, 0x45, 0x23, 0x0C, 0x99, 0x09, 0x4D, 0x38, 0x4C, 0x9E, 
0x4B, 0x8A, 0x27, 0x13, 0x04, 0x1E, 0xCE, 0xA2, 0x51, 0x48, 0x68, 0x1F, 0x9D, 0x1B, 0x81, 0x3E, 
0x39, 0x02, 0xD9, 0x8B, 0x75, 0x40, 0x0B, 0x0E, 0xBA, 0x09, 0x6B, 0x60, 0x18, 0xC7, 0x00, 0x40, 
0x44, 0xBD, 0x94, 0xED, 0x41, 0x1D, 0x50, 0xB2, 0xC1, 0x67, 0xF2, 0x42, 0x29, 0x49, 0x68, 0xC2, 
0xA1, 0x79, 0xA7, 0x6E, 0xF0, 0x0E, 0x0E, 0xC5, 0xC0, 0x69, 0x11, 0x29, 0x6B, 0x80, 0xC8, 0x39, 
0x24, 0x6E, 0x8B, 0xFC, 0xF5, 0x00, 0xA7, 0x28, 0xFC, 0xE7, 0x0E, 0x5D, 0x17, 0x90, 0xCC, 0xD5, 
0x3A, 0xDC, 0x0E, 0x05, 0xEC, 0x7C, 0xFA, 0xA2, 0xE3, 0xCB, 0x28, 0x3A, 0xFE, 0x90, 0x11, 0x6F, 
0x7B, 0x80, 0x16, 0xF2, 0x41, 0xD7, 0xB9, 0x15, 0x34, 0x9A, 0x04, 0x1C, 0x0E, 0xAE, 0x54, 0x53, 
0xF7, 0x82, 0x91, 0x5C, 0xA2, 0xE9, 0xA0, 0x04, 0xBD, 0x67, 0x23, 0x9A, 0x70, 0x68, 0xD8, 0xA8, 
0xB5, 0x5E, 0x7A, 0x82, 0x8B, 0x52, 0xDD, 0x25, 0x92, 0x79, 0xE8, 0xC7, 0x15, 0x40, 0x09, 0xD8, 
0x36, 0xFE, 0x7A, 0x86, 0xD0, 0x84, 0x43, 0xC7, 0x85, 0x2D, 0xF5, 0x47, 0x0C, 0xB8, 0x28, 0xF9, 
0xED, 0xBC, 0xFB, 0xA2, 0x87, 0xCB, 0x15, 0x25, 0x47, 0x8A, 0x65, 0x1E, 0x56, 0x02, 0x4D, 0x38, 
0xF4, 0xDA, 0xC4, 0x53, 0x97, 0x71, 0x80, 0x23, 0x82, 0xF7, 0xA0, 0xF4, 0xC6, 0x97, 0x4B, 0x34, 
0x30, 0x5C, 0x22, 0x51, 0x75, 0xD0, 0x88, 0xC3, 0x20, 0x48, 0x3E, 0x40, 0x37, 0x03, 0xC4, 0x59, 
0x1B, 0xB4, 0xFA, 0xB9, 0x5C, 0x1F, 0x95, 0x7B, 0x12, 0x82, 0xB6, 0xB3, 0xBE, 0x12, 0x3A, 0x88, 
0xDF, 0x3A, 0xA0, 0xF8, 0x7A, 0xAC, 0xFA, 0x1F, 0xC7, 0xD3, 0xD8, 0xA1, 0x8F, 0x18, 0xC5, 0x69, 
0xAD, 0xB8, 0xDA, 0x9A, 0xB9, 0x13, 0x07, 0x39, 0x88, 0xF3, 0xB5, 0x7D, 0xEE, 0x05, 0x41, 0xC9, 
0x70, 0x9C, 0x14, 0x49, 0x8B, 0x33, 0x7F, 0x8E, 0x1D, 0x18, 0xEC, 0x00, 0x0C, 0x76, 0x7D, 0xEB, 
0x5F, 0x3A, 0x74, 0x5C, 0xD6, 0xF4, 0x27, 0x2C, 0x5D, 0x77, 0xED, 0xEE, 0xD3, 0x17, 0x7B, 0xF7, 
0xEE, 0xBD, 0xF5, 0xEE, 0xEE, 0xB5, 0x77, 0xB7, 0xF6, 0x7E, 0xE1, 0xC3, 0xC7, 0x6B, 0x9F, 0x9E, 
0xEE, 0x2D, 0x19, 0xAF, 0xDE, 0xDE, 0xBD, 0xFB, 0xF6, 0xD5, 0xDE, 0x3C, 0x2F, 0x9E, 0xF6, 0xBE, 
0xF6, 0xFE, 0x16, 0x4E, 0xC7, 0xFB, 0x6B, 0xBD, 0xE7, 0x2F, 0x29, 0x48, 0xE7, 0x32, 0x79, 0x79, 
0x6B, 0xFB, 0xC0, 0x36, 0x4D, 0x0A, 0x99, 0x37, 0xEB, 0xD9, 0x99, 0x9B, 0xA7, 0xF6, 0xEC, 0xD9, 
0x73, 0xE3, 0xC2, 0x99, 0x33, 0x17, 0x6E, 0xEC, 0xC9, 0x71, 0xEA, 0xE6, 0x85, 0x67, 0xF7, 0xD1, 
0xF5, 0x52, 0x71, 0xEA, 0xF5, 0x99, 0x33, 0xAF, 0x4F, 0xE5, 0x4F, 0x4F, 0x9D, 0xBA, 0x79, 0x5F, 
0x79, 0xFC, 0x0D, 0xF4, 0xE0, 0x99, 0xDF, 0x25, 0xB1, 0x0D, 0x66, 0xE0, 0xA2, 0x15, 0xC8, 0x61, 
0xC6, 0xCB, 0x73, 0xBB, 0x0B, 0x39, 0x7E, 0xFC, 0xC4, 0x89, 0xE3, 0x5F, 0x0F, 0xF0, 0x91, 0x02, 
0x3A, 0xC3, 0xA7, 0x25, 0xE3, 0x87, 0xA7, 0xE1, 0xC7, 0x2B, 0x09, 0xC9, 0xBD, 0x7F, 0xF3, 0xE8, 
0x73, 0x98, 0x97, 0xB3, 0xC7, 0x23, 0x87, 0xFB, 0xCF, 0x0F, 0xEF, 0xFA, 0x19, 0x87, 0x0F, 0x2B, 
0xD7, 0xD1, 0xDB, 0xE1, 0x82, 0xCB, 0xA5, 0xE3, 0x30, 0x22, 0x7F, 0x82, 0xF9, 0xE6, 0x08, 0xFD, 
0xE6, 0xFF, 0x26, 0x73, 0x62, 0x06, 0x76, 0xB8, 0xF0, 0xFC, 0xF8, 0x6F, 0xEE, 0x55, 0xE8, 0x50, 
0x20, 0xA1, 0xB2, 0x41, 0x61, 0x3A, 0x77, 0xA1, 0x1F, 0x99, 0xEF, 0xFD, 0x8E, 0xEF, 0x3A, 0x7C, 
0xE2, 0xF8, 0xF3, 0x55, 0xD8, 0x61, 0xF6, 0xB4, 0xC2, 0xC2, 0x94, 0xCF, 0x42, 0x9C, 0x87, 0xCA, 
0x91, 0x82, 0x72, 0xBD, 0x54, 0x1C, 0x57, 0x8A, 0xF0, 0xAF, 0xCA, 0xD2, 0xB9, 0x6F, 0xCA, 0xD2, 
0xF1, 0x73, 0xE7, 0x76, 0x9F, 0x7B, 0xFE, 0x72, 0xDA, 0xFA, 0xE5, 0xC8, 0x61, 0xD1, 0x86, 0x81, 
0x6D, 0xFE, 0xB2, 0x4E, 0xEF, 0xC9, 0x53, 0xCA, 0x3A, 0x8D, 0xF9, 0x75, 0x9D, 0xC6, 0xB4, 0x19, 
0xB8, 0x71, 0x92, 0x0E, 0x4F, 0x6C, 0x4F, 0x99, 0xD4, 0xB4, 0xD9, 0x8F, 0x34, 0x5D, 0xBA, 0x16, 
0xB7, 0xAD, 0x07, 0x0E, 0x1C, 0xF8, 0xDA, 0xB6, 0x1E, 0xC0, 0x7C, 0xD3, 0xB6, 0x1E, 0x28, 0x05, 
0x4A, 0xDB, 0xFA, 0xE5, 0x2C, 0xDF, 0xB6, 0x1E, 0xC8, 0xB5, 0xAD, 0xDF, 0x26, 0xB1, 0x29, 0x7A, 
0x4D, 0x5A, 0xAE, 0xFB, 0x43, 0x8C, 0xA3, 0x0B, 0x62, 0x1C, 0x87, 0x62, 0x9C, 0x37, 0x4A, 0x80, 
0x52, 0xE1, 0xB0, 0xFC, 0x10, 0xE3, 0x08, 0x1C, 0xE3, 0x8E, 0xE6, 0x62, 0xDC, 0xBF, 0xF4, 0x35, 
0x04, 0xDC, 0x61, 0x31, 0x79, 0xE5, 0xE1, 0xB3, 0xD2, 0xB9, 0xE0, 0x02, 0x56, 0xD4, 0x03, 0xAC, 
0x00, 0x40, 0x0B, 0xFD, 0xA5, 0x8E, 0x9D, 0x48, 0xD4, 0xE7, 0xC3, 0xA9, 0x36, 0x3F, 0x46, 0x03, 
0x06, 0x21, 0x97, 0x68, 0x34, 0x4D, 0x69, 0x64, 0x2E, 0x1F, 0xD2, 0x86, 0x43, 0xC3, 0xC1, 0x46, 
0xD4, 0xF7, 0x96, 0x53, 0xFD, 0x88, 0x49, 0x57, 0x79, 0xB8, 0x5C, 0xA2, 0x9D, 0x0F, 0x58, 0x68, 
0xF5, 0x6B, 0x63, 0xFC, 0x90, 0x1B, 0x03, 0x21, 0x07, 0x27, 0x9E, 0x12, 0x0B, 0xD0, 0x5F, 0xC7, 
0x40, 0xD5, 0x50, 0x3A, 0x48, 0x6B, 0xC2, 0x41, 0x1E, 0x8B, 0x9E, 0x76, 0xCA, 0xD3, 0x1A, 0x61, 
0xCA, 0x86, 0x8E, 0x14, 0x07, 0x5F, 0x50, 0x82, 0xEC, 0x03, 0x41, 0x13, 0x0E, 0xF5, 0xBA, 0x0E, 
0x10, 0xF9, 0x9A, 0x43, 0xB8, 0xD0, 0xF8, 0xAF, 0xF3, 0xB0, 0xE6, 0x10, 0xA7, 0x38, 0xE0, 0x41, 
0x90, 0x56, 0xE6, 0x04, 0xEA, 0x8D, 0x1C, 0xDB, 0x0F, 0x4A, 0x66, 0x5C, 0x68, 0x9C, 0x29, 0x37, 
0x55, 0x8B, 0x8E, 0x14, 0x07, 0xE7, 0x15, 0x96, 0xB7, 0x67, 0xB4, 0x31, 0xBF, 0x84, 0x16, 0x1F, 
0x78, 0xF6, 0x74, 0x05, 0x87, 0x0A, 0x13, 0x1A, 0xBB, 0x19, 0xAB, 0xBE, 0x4C, 0x55, 0x72, 0x49, 
0x09, 0xCF, 0x7A, 0x6B, 0xC2, 0xA1, 0x5E, 0xCF, 0x31, 0xD3, 0x79, 0x3C, 0x35, 0x06, 0x38, 0xC7, 
0x45, 0x16, 0x86, 0xCF, 0x3A, 0x01, 0x52, 0x40, 0x54, 0x5E, 0xE6, 0xC9, 0xCB, 0x71, 0x6D, 0xCC, 
0xB7, 0xD6, 0x1B, 0x36, 0x87, 0xB2, 0xC9, 0x33, 0x4C, 0xF4, 0x79, 0x3B, 0xC3, 0x3C, 0xC2, 0x3A, 
0x18, 0xE1, 0x8A, 0x5B, 0x7F, 0xEF, 0x18, 0xAD, 0x0D, 0x87, 0xE1, 0x1D, 0xF0, 0xDC, 0x3D, 0x07, 
0x38, 0x79, 0x19, 0xD4, 0x7B, 0x05, 0xC7, 0x88, 0xDC, 0xDC, 0xBD, 0xF1, 0x6A, 0x85, 0x36, 0x1C, 
0x5A, 0x0C, 0xE9, 0x46, 0x49, 0xF2, 0xA2, 0x28, 0x71, 0xA8, 0x8A, 0xE5, 0xB3, 0xA6, 0x0A, 0x80, 
0xE1, 0x50, 0xA8, 0x86, 0xF6, 0x8C, 0x36, 0x1C, 0xF0, 0xE2, 0x34, 0x6F, 0x95, 0x17, 0xA7, 0xB9, 
0xF8, 0x23, 0x12, 0x1E, 0x31, 0xFB, 0x38, 0x39, 0x23, 0xF6, 0x85, 0x50, 0x9F, 0xC9, 0xA1, 0x89, 
0xB5, 0xAC, 0x7A, 0x1D, 0x87, 0xB4, 0xA6, 0xD8, 0xD3, 0x4E, 0x1C, 0x19, 0x22, 0xC1, 0x10, 0x69, 
0x8C, 0x05, 0x04, 0x02, 0x5B, 0xD4, 0x5D, 0xB1, 0x31, 0xFB, 0xA3, 0x02, 0xD0, 0xC4, 0xDA, 0xEE, 
0xF0, 0xB9, 0x24, 0x6F, 0x55, 0x96, 0xE1, 0x84, 0x63, 0x47, 0x5C, 0xEE, 0x87, 0x41, 0x0F, 0xCE, 
0x15, 0xE2, 0xE8, 0x25, 0x97, 0xEB, 0xE1, 0x51, 0x4E, 0x0B, 0x0E, 0xF5, 0x46, 0x0E, 0x6E, 0xC5, 
0xE3, 0x6D, 0x3F, 0x8A, 0x44, 0x88, 0x24, 0xA5, 0xD3, 0x09, 0x5C, 0x9E, 0x22, 0xD1, 0x2C, 0xF4, 
0xA2, 0xC6, 0x56, 0x0B, 0xFB, 0x04, 0xDA, 0xAD, 0x1C, 0xD2, 0x0F, 0x86, 0x4F, 0xD7, 0xC9, 0x55, 
0x22, 0x72, 0x30, 0x44, 0x42, 0xAF, 0xE5, 0xBC, 0x13, 0x9D, 0x1D, 0xB2, 0xB8, 0x99, 0xDA, 0x83, 
0x11, 0x2D, 0x38, 0xA0, 0x5E, 0x53, 0xA7, 0x96, 0x54, 0xF6, 0x98, 0x00, 0x30, 0xBE, 0xE0, 0x11, 
0x91, 0x42, 0xDB, 0xAE, 0xE2, 0x02, 0x81, 0x97, 0xD9, 0x49, 0xD4, 0x05, 0xD7, 0x40, 0x59, 0x42, 
0x39, 0xD1, 0xB9, 0x15, 0xCF, 0x5C, 0xC6, 0x6D, 0x13, 0xEE, 0x2A, 0xED, 0x8B, 0xD9, 0x20, 0xEF, 
0xBD, 0x6C, 0x0A, 0x78, 0x1C, 0xF2, 0x76, 0x87, 0x84, 0x5C, 0xCA, 0x54, 0x76, 0xE0, 0x6B, 0xF2, 
0x7B, 0x7F, 0x1C, 0x2A, 0xEC, 0xFD, 0xC1, 0x1B, 0x98, 0x5A, 0x91, 0x5F, 0xF7, 0x60, 0x11, 0x89, 
0xD4, 0x3D, 0x12, 0xF2, 0x46, 0xC9, 0xF2, 0x26, 0x79, 0xD2, 0x0B, 0xBD, 0x17, 0x0F, 0xE1, 0xFD, 
0xD2, 0x1C, 0x50, 0x8F, 0x3A, 0x8B, 0xF8, 0xDD, 0x1E, 0xAC, 0x2A, 0xCB, 0x75, 0xB2, 0x48, 0x07, 
0x2C, 0x31, 0xB4, 0x15, 0x59, 0x6D, 0xF1, 0x2B, 0xA1, 0x81, 0xAB, 0x0B, 0x5E, 0xBA, 0x27, 0x42, 
0x8A, 0xF4, 0xD6, 0x5A, 0x25, 0x48, 0xD9, 0xAA, 0x02, 0x95, 0x88, 0x43, 0xEA, 0x91, 0xB9, 0x44, 
0x16, 0xEC, 0x85, 0x2B, 0xDE, 0x01, 0x4B, 0x30, 0xEE, 0x1A, 0xB3, 0x13, 0xC8, 0x10, 0x9E, 0x64, 
0x2C, 0xEC, 0x82, 0x7A, 0x3D, 0x44, 0x2F, 0xBD, 0x31, 0x64, 0x55, 0x17, 0xBB, 0x0D, 0xEA, 0x7F, 
0x04, 0xDA, 0xFD, 0x45, 0x3A, 0x28, 0xFB, 0xE1, 0x44, 0xFB, 0x31, 0x87, 0x3C, 0x88, 0xC6, 0x16, 
0xC7, 0x2C, 0xB5, 0x2C, 0x89, 0x3F, 0xA1, 0xF2, 0x80, 0xF7, 0x86, 0x16, 0xEB, 0x80, 0xEB, 0x04, 
0xC3, 0x4B, 0x29, 0x7F, 0x04, 0x28, 0xD0, 0x4E, 0xC3, 0xC1, 0x93, 0xD6, 0x23, 0x61, 0xB7, 0xDB, 
0x6D, 0x34, 0x1A, 0xD1, 0xAB, 0x64, 0xE0, 0x9B, 0x8B, 0x3C, 0xDA, 0xA3, 0x4B, 0xEC, 0x34, 0xD8, 
0x8B, 0x71, 0x50, 0xEA, 0x04, 0x45, 0xDE, 0x79, 0x83, 0x03, 0x85, 0x02, 0x41, 0xD0, 0x15, 0xE7, 
0x4D, 0x65, 0xE1, 0xAA, 0xC4, 0xA7, 0x63, 0x95, 0x44, 0x71, 0x0E, 0x58, 0x62, 0x5C, 0xFF, 0x6E, 
0x14, 0x23, 0x5D, 0x89, 0x0B, 0xB2, 0x45, 0xBE, 0x25, 0xDA, 0x59, 0x72, 0x80, 0x33, 0x2A, 0x91, 
0xAC, 0xC5, 0x70, 0xB4, 0x28, 0x07, 0xCC, 0xD4, 0xC9, 0x63, 0x5A, 0x43, 0xE8, 0xB6, 0x9A, 0x2A, 
0x05, 0x5A, 0xFE, 0xF6, 0x40, 0x99, 0x14, 0xB0, 0x44, 0x45, 0x74, 0x3F, 0xC3, 0x5A, 0x0E, 0x86, 
0x8A, 0x72, 0xC0, 0xB4, 0xEB, 0x3A, 0xB4, 0xC3, 0x74, 0x64, 0x51, 0x6B, 0x49, 0x26, 0x90, 0x06, 
0xE0, 0x72, 0x12, 0xA5, 0xF7, 0x00, 0x9C, 0x10, 0x94, 0x78, 0xF7, 0x91, 0x70, 0xB1, 0x0E, 0x98, 
0x1D, 0x9D, 0xDA, 0x93, 0x94, 0x1E, 0x56, 0xDF, 0x79, 0x60, 0x4E, 0x44, 0x90, 0x86, 0x0C, 0x57, 
0x72, 0x09, 0xF4, 0x10, 0x24, 0x01, 0x29, 0x4A, 0x0D, 0x87, 0x76, 0x2B, 0x3B, 0x77, 0xF7, 0xF2, 
0xA8, 0xB1, 0x13, 0xEF, 0x5D, 0x4E, 0x9D, 0x35, 0x7B, 0x1C, 0x0E, 0x87, 0x40, 0xD3, 0x44, 0xE9, 
0xA1, 0x69, 0x0F, 0x1A, 0xC3, 0xAB, 0xF4, 0xFD, 0xB8, 0x8E, 0x3D, 0x3B, 0x77, 0x6F, 0xDF, 0x8D, 
0x47, 0x99, 0x41, 0xA6, 0xBD, 0x8F, 0x43, 0xA1, 0xD0, 0xA5, 0x28, 0xFA, 0xE2, 0x97, 0xB9, 0xC4, 
0xA0, 0x47, 0x24, 0x1F, 0x64, 0x29, 0x55, 0x1C, 0x30, 0xBA, 0x8E, 0xF5, 0xC7, 0x75, 0x1F, 0x95, 
0xE6, 0x73, 0x01, 0x0E, 0x92, 0x65, 0x82, 0x81, 0x2A, 0xE5, 0x83, 0x42, 0xBB, 0x15, 0xDB, 0x06, 
0x8F, 0x7E, 0xD4, 0xB7, 0xBA, 0x65, 0xCB, 0x96, 0x2E, 0x5E, 0x5F, 0x46, 0xA0, 0x77, 0x8B, 0x5A, 
0x0E, 0xF2, 0xF2, 0xD7, 0xE2, 0xE1, 0x13, 0x26, 0x4E, 0x9C, 0x38, 0x6C, 0x40, 0xDF, 0x06, 0xE5, 
0xA3, 0x7F, 0xDB, 0x11, 0xBA, 0x7A, 0xAA, 0xA3, 0xEB, 0x59, 0xBF, 0x8C, 0xF4, 0xEC, 0xF8, 0xAB, 
0x74, 0x7C, 0x06, 0x50, 0xF2, 0xDA, 0xD3, 0x58, 0xD1, 0xFE, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x49, 
0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
};
const int sizeof_hover_top = sizeof(hover_top);


const unsigned char hover_side[] {
0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 
0x00, 0x00, 0x00, 0xC3, 0x00, 0x00, 0x00, 0x4F, 0x08, 0x03, 0x00, 0x00, 0x00, 0x61, 0xD3, 0x81, 
0x3B, 0x00, 0x00, 0x01, 0x98, 0x50, 0x4C, 0x54, 0x45, 0x00, 0x00, 0x00, 0xEA, 0xEA, 0xEA, 0xEE, 
0xEE, 0xEE, 0xE9, 0xE9, 0xE9, 0xEC, 0xEC, 0xED, 0xEC, 0xEC, 0xEC, 0xED, 0xF2, 0xFB, 0xFF, 0xFF, 
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFF, 0x00, 0x01, 0xF9, 0x45, 0x43, 0xDE, 
0x01, 0x02, 0xF3, 0x8B, 0x8C, 0xE6, 0x0C, 0x0C, 0x0C, 0xD0, 0xD0, 0xD0, 0xFD, 0xFD, 0xFE, 0x02, 
0x02, 0x02, 0x20, 0x20, 0x20, 0xE1, 0xE1, 0xE1, 0x3A, 0x3A, 0x3A, 0xB0, 0xB0, 0xB0, 0x5B, 0x5B, 
0x5B, 0x83, 0x83, 0x83, 0x95, 0x95, 0x95, 0x51, 0x51, 0x51, 0xFC, 0xFC, 0xFD, 0x03, 0x03, 0x03, 
0x41, 0x41, 0x41, 0xA8, 0xA8, 0xA8, 0x01, 0x01, 0xFB, 0x21, 0x21, 0x21, 0x0F, 0x0F, 0x0F, 0x13, 
0x13, 0x13, 0x06, 0x06, 0x06, 0x18, 0x18, 0x18, 0x04, 0x04, 0x04, 0xF9, 0xF9, 0xF9, 0xE0, 0xE0, 
0xE0, 0xD8, 0xD8, 0xD8, 0x63, 0x63, 0x63, 0x2F, 0x2F, 0x2F, 0xFB, 0xFB, 0xFB, 0xAE, 0xAE, 0xAE, 
0x52, 0x52, 0x52, 0x1B, 0x1B, 0x1B, 0x0A, 0x0A, 0x0A, 0x08, 0x08, 0x08, 0xED, 0xED, 0xED, 0xA5, 
0xA5, 0xA6, 0x91, 0x91, 0x91, 0x03, 0x03, 0x77, 0x8A, 0x8C, 0xE5, 0x88, 0x8A, 0xE5, 0xC3, 0xC3, 
0xC4, 0x9D, 0x9D, 0x9D, 0x49, 0x49, 0x49, 0x32, 0x32, 0x33, 0x2B, 0x2B, 0x2B, 0x15, 0x15, 0x18, 
0x01, 0x01, 0x0B, 0x02, 0x01, 0xF7, 0xE7, 0xE7, 0xE7, 0xD5, 0xD5, 0xD5, 0xCA, 0xCA, 0xCA, 0x71, 
0x71, 0x71, 0x4D, 0x4D, 0x4D, 0x26, 0x26, 0x28, 0x01, 0x02, 0xF0, 0xEA, 0xEA, 0xEB, 0xDE, 0xDE, 
0xDF, 0xC7, 0xC7, 0xC7, 0x5E, 0x5E, 0x5E, 0x42, 0x42, 0x42, 0x01, 0x02, 0xF1, 0xEF, 0xEF, 0xEF, 
0xE3, 0xE3, 0xE3, 0xDF, 0xDF, 0xDF, 0xDB, 0xDB, 0xDB, 0xCF, 0xCF, 0xCF, 0xB9, 0xB9, 0xB9, 0x8A, 
0x8A, 0x8A, 0x87, 0x87, 0x87, 0x74, 0x74, 0x74, 0x50, 0x50, 0x50, 0x45, 0x45, 0x45, 0x36, 0x36, 
0x36, 0xF5, 0xF5, 0xF5, 0xB6, 0xB6, 0xB6, 0xA1, 0xA1, 0xA1, 0x9A, 0x9A, 0x9A, 0x79, 0x79, 0x79, 
0xDF, 0xDF, 0xF6, 0xF3, 0xF3, 0xF3, 0xF1, 0xF1, 0xF1, 0x05, 0x02, 0xE7, 0x0A, 0x05, 0xE2, 0xD2, 
0xD2, 0xD2, 0x4F, 0x4F, 0xB8, 0x3C, 0x3D, 0xA6, 0x2F, 0x2F, 0x9C, 0x03, 0x04, 0x76, 0x6B, 0x6B, 
0x6B, 0x3E, 0x3E, 0x3E, 0xC1, 0xC1, 0xEC, 0x42, 0x41, 0xDD, 0x43, 0x44, 0xD6, 0x5D, 0x5E, 0xD4, 
0x48, 0x47, 0xCF, 0x23, 0x21, 0xCF, 0x15, 0x0F, 0xCC, 0xBD, 0xBD, 0xBD, 0xAB, 0xAB, 0xAB, 0x0C, 
0x0D, 0x80, 0x7E, 0x7E, 0x7E, 0x10, 0x10, 0x18, 0xD3, 0xD6, 0xF3, 0x02, 0x03, 0xEB, 0xE2, 0xE2, 
0xE9, 0xA2, 0xA5, 0xE5, 0xB5, 0xC0, 0xE0, 0x90, 0x90, 0xDE, 0x86, 0x83, 0xDD, 0x0C, 0x09, 0xD9, 
0xD0, 0xD0, 0xD7, 0xA6, 0xA8, 0xD7, 0x93, 0x9B, 0xD1, 0x78, 0x7B, 0xCB, 0x08, 0x07, 0xC9, 0x62, 
0x5C, 0xC2, 0xBF, 0xBF, 0xBF, 0xA3, 0xA3, 0xAC, 0x86, 0x86, 0x90, 0x58, 0x58, 0x58, 0x40, 0x40, 
0x4A, 0x9D, 0x5A, 0x49, 0x1B, 0x00, 0x00, 0x00, 0x07, 0x74, 0x52, 0x4E, 0x53, 0x00, 0xCC, 0x44, 
0xEE, 0x88, 0x88, 0x66, 0x10, 0x30, 0x60, 0x03, 0x00, 0x00, 0x05, 0x0D, 0x49, 0x44, 0x41, 0x54, 
0x68, 0xDE, 0xEC, 0xCF, 0x31, 0x0E, 0x83, 0x30, 0x10, 0x44, 0x51, 0x77, 0x5E, 0x6D, 0x93, 0x78, 
0x85, 0x44, 0x6C, 0x91, 0xF4, 0x14, 0x54, 0xB9, 0x85, 0xDB, 0x84, 0x3B, 0x70, 0xFF, 0x13, 0x40, 
0x8B, 0x8C, 0xA8, 0x90, 0x98, 0x95, 0xE6, 0x9D, 0xE0, 0xFF, 0x40, 0x17, 0xE9, 0xA6, 0x5A, 0xDF, 
0x07, 0x6A, 0xDF, 0x05, 0x2F, 0xBE, 0x0F, 0x39, 0x66, 0xBF, 0xE0, 0x45, 0x91, 0xA1, 0xA9, 0x37, 
0x93, 0xCD, 0x2B, 0x78, 0x51, 0xC4, 0xC6, 0x4F, 0x6B, 0xF1, 0xF4, 0x30, 0xD9, 0x90, 0x35, 0xEE, 
0xA4, 0x94, 0xB4, 0xF7, 0xF4, 0x30, 0x8B, 0xE5, 0xB8, 0xA7, 0xAA, 0xBE, 0x1E, 0x8A, 0x48, 0x8E, 
0x2D, 0x3E, 0x9C, 0xE3, 0x03, 0x1F, 0x60, 0xF1, 0x01, 0x03, 0x1F, 0x30, 0xF0, 0x01, 0x03, 0x1F, 
0x30, 0xF0, 0x01, 0x03, 0x1F, 0x30, 0xF0, 0x01, 0x03, 0x1F, 0x30, 0xF0, 0x01, 0x03, 0x1F, 0x30, 
0xF0, 0x01, 0x03, 0x1F, 0x30, 0xF0, 0x01, 0xC3, 0x4D, 0x0F, 0xCF, 0xF1, 0xEF, 0xFC, 0x61, 0xED, 
0xD6, 0x4C, 0x98, 0xD2, 0x06, 0xA2, 0x00, 0x4C, 0x4F, 0x5E, 0x97, 0xB6, 0xF0, 0x1E, 0x8A, 0xB5, 
0x89, 0x42, 0x80, 0xA0, 0xDC, 0x97, 0x96, 0x4B, 0x50, 0x0E, 0x01, 0xAB, 0xAD, 0x67, 0xBD, 0x7B, 
0x57, 0xED, 0x7D, 0xDF, 0xF7, 0xDD, 0xBF, 0xDD, 0x17, 0x95, 0xEA, 0xA8, 0xD3, 0x99, 0x58, 0xE2, 
0x0C, 0xFD, 0x48, 0x58, 0xD8, 0xCC, 0xEC, 0xDB, 0x2F, 0xD9, 0x97, 0xDD, 0x0C, 0x4C, 0xF8, 0x15, 
0xA2, 0x52, 0x0B, 0x3B, 0x0C, 0x86, 0x96, 0xED, 0x00, 0x40, 0xD1, 0x44, 0xAB, 0x3A, 0xD4, 0xA6, 
0xE6, 0x80, 0x51, 0x2A, 0x1E, 0xB8, 0xDD, 0xD6, 0x92, 0x0E, 0x87, 0x96, 0x02, 0x51, 0x00, 0x52, 
0xCF, 0x77, 0x16, 0x07, 0xC0, 0x9A, 0x6E, 0x41, 0x87, 0x8B, 0x4B, 0x01, 0x0F, 0x11, 0x44, 0xE7, 
0x9E, 0x0C, 0x8A, 0xF9, 0x65, 0x90, 0x6F, 0x1F, 0x6B, 0x31, 0x87, 0xC3, 0x0B, 0xFE, 0x00, 0x10, 
0x79, 0x5C, 0xD3, 0xDD, 0xF3, 0x82, 0x19, 0xE2, 0x6F, 0x23, 0xAD, 0xE5, 0x30, 0x19, 0xF6, 0x12, 
0x00, 0xB9, 0x4A, 0xE3, 0x3E, 0xB3, 0xD0, 0x7E, 0x3F, 0x46, 0x07, 0x50, 0x24, 0x65, 0x9C, 0x83, 
0x68, 0xB2, 0xC3, 0xE1, 0xC9, 0x8C, 0x42, 0x44, 0x6A, 0x65, 0xFA, 0x86, 0x30, 0xE3, 0x46, 0x0C, 
0x8C, 0x67, 0x48, 0x1E, 0x69, 0x8E, 0x03, 0x11, 0x3B, 0x18, 0xFB, 0x3F, 0x81, 0x50, 0x87, 0x66, 
0x10, 0xB3, 0x3F, 0xEB, 0xF5, 0xA1, 0x40, 0x6C, 0x04, 0x49, 0xB8, 0x21, 0x36, 0x65, 0x6A, 0x02, 
0xE1, 0x3D, 0x1D, 0xB0, 0x79, 0x0E, 0xB6, 0xE5, 0xAC, 0x9B, 0x0D, 0xDC, 0xE1, 0xC7, 0xBD, 0x41, 
0x36, 0x10, 0xBC, 0x99, 0x19, 0x2E, 0xE3, 0x19, 0xA0, 0xDC, 0x85, 0x26, 0x84, 0xB8, 0x44, 0xD0, 
0x29, 0x0C, 0x73, 0x18, 0xB4, 0x95, 0x22, 0xC0, 0xC8, 0xE7, 0xD3, 0x3D, 0x4C, 0x1B, 0xD3, 0x73, 
0xB1, 0x6D, 0xBD, 0xE0, 0x57, 0xAA, 0x42, 0x34, 0xC5, 0x95, 0xFF, 0x48, 0x4F, 0x86, 0xE8, 0xCC, 
0xCE, 0x3A, 0x8E, 0x73, 0xB6, 0x09, 0x0E, 0x8E, 0xC4, 0x62, 0x7B, 0x44, 0x25, 0x22, 0x00, 0x52, 
0x5C, 0x76, 0xBB, 0xDD, 0xC5, 0x1B, 0xEF, 0x5B, 0x44, 0x01, 0xDC, 0xF6, 0x7F, 0x64, 0x77, 0x33, 
0x2E, 0x8E, 0xE2, 0xE2, 0x37, 0x2B, 0x40, 0x38, 0x91, 0xA8, 0xEF, 0x5F, 0xE0, 0x48, 0xA8, 0x3D, 
0x4A, 0x40, 0xA0, 0xB2, 0x00, 0x97, 0x32, 0x1C, 0x1C, 0x5A, 0x38, 0x59, 0x26, 0x60, 0x88, 0x28, 
0x32, 0xB2, 0xDF, 0xE1, 0x7A, 0x21, 0x1C, 0x05, 0x90, 0x81, 0x40, 0xE6, 0x4D, 0x8D, 0x5A, 0x0F, 
0x18, 0x25, 0x06, 0x1A, 0x31, 0x62, 0x13, 0x35, 0x93, 0xDE, 0x5F, 0x1E, 0x84, 0x55, 0x20, 0xEF, 
0xEC, 0xEC, 0x6C, 0x3B, 0x37, 0x46, 0x4A, 0x72, 0xC2, 0x36, 0x61, 0x3B, 0x48, 0x12, 0x1D, 0x5A, 
0xEF, 0xBD, 0xC9, 0xCC, 0xAC, 0x97, 0x64, 0x50, 0x3A, 0xF7, 0xB3, 0xA8, 0x08, 0x03, 0xC4, 0x4A, 
0x29, 0x81, 0xE2, 0x8A, 0xA3, 0x4B, 0xD5, 0x66, 0xB6, 0x5E, 0x9F, 0x30, 0x1F, 0x10, 0x02, 0xC7, 
0x1E, 0xBB, 0x64, 0xA2, 0xC8, 0x4C, 0x1D, 0x11, 0x53, 0x33, 0x11, 0x02, 0x45, 0x7F, 0x6E, 0x1F, 
0xBA, 0xE4, 0xA1, 0xDC, 0xB3, 0xAB, 0x42, 0x9B, 0x0B, 0xC4, 0x0D, 0xBF, 0x1B, 0xC8, 0xE3, 0x5A, 
0x6C, 0xCC, 0x9E, 0xC2, 0x30, 0x19, 0xB1, 0xB1, 0x00, 0x10, 0x93, 0x7E, 0x2F, 0x00, 0xCD, 0x15, 
0xAF, 0x08, 0x8D, 0xAB, 0xF5, 0x00, 0x80, 0xB5, 0xA8, 0xD7, 0xA1, 0x03, 0xC8, 0x3E, 0x21, 0x1A, 
0x2D, 0x07, 0x13, 0xB9, 0x18, 0x90, 0xFB, 0xD2, 0x84, 0xA4, 0x49, 0x49, 0x02, 0x0D, 0x91, 0x40, 
0x09, 0xB9, 0x79, 0xA6, 0x96, 0xD6, 0xCE, 0x59, 0x60, 0xA9, 0xB6, 0x19, 0x47, 0x88, 0xA1, 0x76, 
0x80, 0xB2, 0xDE, 0xC4, 0xCE, 0xCA, 0x34, 0x33, 0x8F, 0x1B, 0x2D, 0x30, 0x58, 0xED, 0xCC, 0x01, 
0x50, 0x20, 0x59, 0x0D, 0x0A, 0x6D, 0x9A, 0x33, 0x1B, 0x01, 0x62, 0x50, 0xB3, 0xF0, 0xD9, 0xB2, 
0x2A, 0x80, 0x75, 0xAD, 0xCA, 0x81, 0x36, 0x1D, 0x50, 0x5A, 0xF0, 0x90, 0xAC, 0x73, 0x41, 0x90, 
0x88, 0x92, 0xB7, 0x88, 0x0D, 0x07, 0x94, 0x78, 0x4F, 0x95, 0x15, 0x59, 0x8E, 0x66, 0x1D, 0x42, 
0xC3, 0x98, 0xEB, 0x20, 0x84, 0x84, 0x58, 0x5C, 0x76, 0x01, 0x51, 0x65, 0x21, 0x2E, 0xB0, 0xE1, 
0xA0, 0x0D, 0xA7, 0x59, 0xAE, 0x1B, 0xD7, 0x75, 0x5B, 0xED, 0x22, 0x0A, 0x6B, 0x6D, 0x6C, 0x8C, 
0x24, 0xC1, 0x1F, 0x10, 0x7D, 0x93, 0x9C, 0x23, 0xE0, 0xF5, 0x17, 0xE7, 0x0D, 0x50, 0x68, 0xF4, 
0x75, 0x30, 0xE4, 0x05, 0x52, 0xED, 0xD3, 0x36, 0x94, 0x50, 0x73, 0x5A, 0x8F, 0xA4, 0x95, 0x21, 
0x37, 0xB9, 0x87, 0xF4, 0x38, 0xF4, 0x0E, 0x40, 0x6C, 0x1A, 0xFF, 0xA4, 0x03, 0xB3, 0x9E, 0x6E, 
0xB5, 0x19, 0x2F, 0x81, 0xEA, 0x4D, 0x4A, 0x66, 0x43, 0x10, 0x02, 0x43, 0x65, 0x37, 0x00, 0x95, 
0x87, 0x78, 0x71, 0xBF, 0xED, 0x7A, 0x73, 0x81, 0xE3, 0x11, 0xD0, 0xED, 0xE0, 0xED, 0x95, 0x76, 
0x65, 0xAE, 0x08, 0x2E, 0xCC, 0x59, 0x01, 0x94, 0x76, 0xC3, 0x50, 0x80, 0x28, 0xD2, 0x5D, 0xDD, 
0x43, 0xB0, 0x6D, 0x0E, 0xD4, 0x35, 0xDD, 0x0E, 0x18, 0xDC, 0xE5, 0x80, 0x78, 0x25, 0x9D, 0x33, 
0x6E, 0xD5, 0x21, 0x83, 0x4C, 0x30, 0xF2, 0x6D, 0xCF, 0xBB, 0x5E, 0x30, 0x49, 0x54, 0xD6, 0xED, 
0x20, 0x38, 0x93, 0x77, 0x39, 0x0C, 0x4D, 0x29, 0x40, 0x60, 0x0C, 0x32, 0x11, 0x01, 0x64, 0x8B, 
0x7B, 0x3A, 0xB4, 0x05, 0x64, 0x59, 0xAF, 0x83, 0x3B, 0xA5, 0x3D, 0xAE, 0xED, 0x00, 0xEB, 0x39, 
0x00, 0xE5, 0x7C, 0x28, 0x14, 0x72, 0x18, 0x41, 0xC8, 0x91, 0x54, 0x80, 0x2A, 0xA5, 0xB1, 0x3D, 
0x1C, 0xC6, 0x23, 0xA4, 0x3C, 0xD1, 0xB5, 0x56, 0xCA, 0x00, 0x75, 0x08, 0x81, 0x3B, 0xE6, 0xD0, 
0xB1, 0xC5, 0x2C, 0x2B, 0x24, 0xE3, 0x68, 0xD0, 0x8D, 0x49, 0x08, 0x5F, 0x3A, 0x03, 0xB2, 0x67, 
0x6D, 0x6C, 0x63, 0xBE, 0xDE, 0x7E, 0x48, 0x67, 0x4E, 0x33, 0x9D, 0x00, 0x5D, 0x71, 0x21, 0xC4, 
0xF6, 0xE6, 0x45, 0xDC, 0x1F, 0x93, 0x3D, 0x81, 0xB4, 0x8F, 0xAB, 0x8D, 0x23, 0xDE, 0xA1, 0x82, 
0x67, 0xC4, 0xC6, 0x41, 0x50, 0xA0, 0x84, 0x66, 0x0D, 0xFE, 0x28, 0x4A, 0x1E, 0x08, 0xD4, 0x74, 
0x39, 0xDC, 0x70, 0x01, 0x75, 0x4B, 0xDB, 0x1D, 0x24, 0x5F, 0x8F, 0x9F, 0xB8, 0xF5, 0x2A, 0x72, 
0xB5, 0x81, 0x16, 0x7C, 0xA6, 0xDC, 0x00, 0xEE, 0xB4, 0x8F, 0x0D, 0xA4, 0xCD, 0x91, 0xC0, 0x36, 
0x75, 0x17, 0x79, 0x96, 0x4C, 0xFA, 0xF0, 0x13, 0x65, 0xEB, 0xDB, 0xBB, 0x8A, 0xDD, 0xB9, 0x18, 
0xC1, 0xCF, 0x41, 0x49, 0x48, 0xBC, 0x99, 0x0D, 0x03, 0x31, 0x3E, 0xE9, 0x22, 0x18, 0x48, 0x5E, 
0x44, 0xA9, 0xF1, 0xE0, 0x8E, 0x38, 0xD6, 0x05, 0x90, 0x3B, 0xA4, 0xD3, 0xE1, 0x68, 0x39, 0x9F, 
0xAF, 0xA4, 0x50, 0x34, 0x78, 0xF5, 0x7D, 0x20, 0x9F, 0x0F, 0x24, 0xAA, 0x12, 0xF2, 0x4B, 0x92, 
0x50, 0x18, 0x05, 0x22, 0x4A, 0xA9, 0x6C, 0x3E, 0x9F, 0xFF, 0xF5, 0x01, 0x71, 0x33, 0x8C, 0x54, 
0xFB, 0xF1, 0x3C, 0xFF, 0x7C, 0xD1, 0xF4, 0x17, 0x2E, 0xBF, 0xED, 0x3F, 0xDD, 0xDF, 0xDF, 0x7F, 
0xFA, 0x0F, 0xE7, 0x78, 0xBF, 0xD5, 0xB7, 0xBA, 0xBA, 0xB2, 0x55, 0x75, 0xEB, 0x69, 0x5F, 0xDF, 
0xEA, 0xCD, 0x73, 0xDA, 0x11, 0xE3, 0x39, 0x77, 0xB3, 0x8F, 0xB9, 0xB5, 0x15, 0x6C, 0x85, 0xA3, 
0xAF, 0x70, 0xF0, 0x9D, 0xE1, 0xB5, 0x5E, 0xF7, 0xDF, 0xD1, 0x1C, 0xEE, 0x5F, 0x7F, 0x39, 0x3C, 
0x3C, 0x3C, 0x7A, 0xAA, 0xE5, 0x18, 0xE5, 0x5E, 0x0F, 0x5F, 0x7B, 0xF8, 0xC2, 0x64, 0x7A, 0xF3, 
0xF0, 0xD4, 0x68, 0xC1, 0xE9, 0x74, 0x9E, 0x68, 0x39, 0xB8, 0xD3, 0x96, 0xC2, 0xA9, 0xEB, 0x9F, 
0x4D, 0xA6, 0x4F, 0x5F, 0x0A, 0x16, 0x8B, 0xB3, 0x60, 0x39, 0xD1, 0x72, 0x38, 0x0B, 0x4E, 0xEE, 
0xF9, 0xB5, 0x9B, 0x26, 0xD3, 0xC7, 0x47, 0x05, 0xBE, 0x06, 0x96, 0x56, 0x74, 0xB0, 0x38, 0x99, 
0xEB, 0x5F, 0x39, 0x1F, 0xDE, 0x3D, 0xBA, 0xA6, 0x8D, 0x25, 0x4B, 0xCB, 0xA1, 0x39, 0x8C, 0xBE, 
0x7F, 0x70, 0x99, 0x1D, 0x8E, 0xDF, 0xB9, 0x7F, 0xEF, 0xE4, 0xDD, 0x93, 0x2D, 0xC8, 0xDD, 0x93, 
0xF7, 0x1E, 0xBC, 0xBE, 0x6C, 0xFA, 0x2F, 0xF8, 0x0D, 0xBE, 0x8F, 0x73, 0xB0, 0x07, 0x1D, 0x95, 
0x07, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
};
const int sizeof_hover_side = sizeof(hover_side);

const unsigned char hover_rear[] = {
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 
0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x45, 0x08, 0x03, 0x00, 0x00, 0x00, 0x8B, 0xCC, 0xB3, 
0xF5, 0x00, 0x00, 0x01, 0xB6, 0x50, 0x4C, 0x54, 0x45, 0x00, 0x00, 0x00, 0xEA, 0xEA, 0xEA, 0xE9, 
0xE9, 0xE9, 0xEC, 0xEC, 0xEC, 0xEF, 0xEF, 0xEF, 0xEB, 0xEC, 0xFA, 0xEB, 0xEB, 0xEB, 0xEF, 0xF3, 
0xFA, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 0x05, 0x05, 0x05, 0xFE, 0xFE, 0xFE, 
0xFC, 0xFC, 0xFC, 0x04, 0x04, 0xF1, 0x95, 0x92, 0xEB, 0x32, 0x33, 0xE6, 0xE6, 0xE6, 0xFA, 0x08, 
0x08, 0x08, 0xF0, 0xF0, 0xF0, 0x37, 0x37, 0x37, 0x0F, 0x0F, 0x0F, 0x43, 0x43, 0x43, 0x0C, 0x0C, 
0x0C, 0x2B, 0x2B, 0x2B, 0xE0, 0xE0, 0xE0, 0xEB, 0xEB, 0xEB, 0x11, 0x11, 0x11, 0xE5, 0xE5, 0xE5, 
0xE7, 0xE7, 0xE7, 0xC9, 0xC9, 0xC9, 0xE4, 0xE5, 0xF9, 0xFA, 0xFA, 0xFA, 0x8B, 0x8B, 0x8B, 0x3F, 
0x3F, 0x3F, 0xB6, 0xB6, 0xB6, 0xAC, 0xAC, 0xAC, 0x27, 0x27, 0x27, 0x14, 0x14, 0x14, 0xCD, 0xCD, 
0xCD, 0x9F, 0x9F, 0x9F, 0x01, 0x01, 0xFC, 0xC0, 0xC0, 0xC0, 0x19, 0x19, 0x19, 0xA7, 0xA7, 0xA7, 
0x9C, 0x9C, 0x9C, 0x97, 0x97, 0x97, 0x92, 0x92, 0x92, 0x35, 0x35, 0x35, 0x25, 0x25, 0x25, 0x16, 
0x16, 0x16, 0xF8, 0xF8, 0xF8, 0xE9, 0xE9, 0xE9, 0xC6, 0xC6, 0xC6, 0x03, 0x04, 0xC0, 0xA4, 0xA4, 
0xA4, 0x75, 0x75, 0x75, 0x65, 0x65, 0x65, 0x47, 0x47, 0x47, 0x3C, 0x3C, 0x3C, 0x23, 0x23, 0x23, 
0x20, 0x20, 0x20, 0x90, 0x90, 0x90, 0x78, 0x78, 0x78, 0x4C, 0x4C, 0x4C, 0x49, 0x49, 0x49, 0x45, 
0x45, 0x45, 0x1E, 0x1E, 0x1E, 0x00, 0x02, 0xF9, 0xCC, 0xCC, 0xCC, 0xBD, 0xBD, 0xBD, 0xB9, 0xB9, 
0xB9, 0x53, 0x53, 0x53, 0x32, 0x32, 0x32, 0xB1, 0xB1, 0xB1, 0x70, 0x70, 0x70, 0x6C, 0x6C, 0x6C, 
0x68, 0x68, 0x68, 0x5D, 0x5D, 0x5D, 0x18, 0x18, 0x18, 0xF4, 0xF4, 0xF4, 0xF2, 0xF2, 0xF2, 0xE2, 
0xE2, 0xE2, 0xD8, 0xD8, 0xD8, 0xCB, 0xCB, 0xCB, 0x88, 0x88, 0x88, 0x73, 0x73, 0x73, 0x62, 0x62, 
0x62, 0x39, 0x39, 0x39, 0x2E, 0x2E, 0x2E, 0x04, 0x06, 0xEF, 0xEC, 0xEC, 0xEC, 0xDD, 0xDD, 0xDD, 
0xB4, 0xB4, 0xB4, 0xA1, 0xA1, 0xA1, 0x87, 0x87, 0x87, 0x7D, 0x7D, 0x7D, 0x4E, 0x4E, 0x4E, 0xE2, 
0xE2, 0xF6, 0xEE, 0xEE, 0xEE, 0x95, 0x93, 0xEA, 0xE1, 0xE1, 0xE1, 0xDA, 0xDA, 0xDA, 0xD5, 0xD5, 
0xD5, 0xD3, 0xD3, 0xD3, 0x8D, 0x8D, 0x8D, 0x58, 0x58, 0x58, 0x0B, 0x0B, 0x30, 0x02, 0x02, 0x28, 
0x02, 0x02, 0xF7, 0xCD, 0xCD, 0xF1, 0x0A, 0x07, 0xEA, 0xB0, 0xB0, 0xE9, 0x1B, 0x17, 0xDC, 0x2F, 
0x2B, 0xD6, 0xCF, 0xCF, 0xCF, 0x08, 0x09, 0xC5, 0x81, 0x81, 0x81, 0x57, 0x57, 0x57, 0x1B, 0x1B, 
0x1B, 0xA4, 0xA5, 0xE8, 0x9A, 0x99, 0xE5, 0x2F, 0x30, 0xE4, 0x31, 0x35, 0xE1, 0x2A, 0x2B, 0xE0, 
0x24, 0x26, 0xDC, 0x90, 0x8E, 0xDB, 0x39, 0x37, 0xD6, 0x1C, 0x1D, 0xD5, 0x10, 0x11, 0xCB, 0x8F, 
0x8F, 0xAB, 0x37, 0x37, 0x5C, 0x18, 0x18, 0x3B, 0xDD, 0xDD, 0xF2, 0xCD, 0xCE, 0xE6, 0x0E, 0x0A, 
0xE1, 0x92, 0x93, 0xDF, 0xCA, 0xCB, 0xDE, 0x4B, 0x4F, 0xDA, 0xB1, 0xB1, 0xCE, 0xAE, 0xAE, 0xCA, 
0x9E, 0x9E, 0xB3, 0x7C, 0x7C, 0xA1, 0x77, 0x77, 0x8E, 0x66, 0x67, 0x7F, 0x19, 0x19, 0x3F, 0x6D, 
0xB5, 0x8A, 0x0C, 0x00, 0x00, 0x00, 0x08, 0x74, 0x52, 0x4E, 0x53, 0x00, 0xCC, 0xEE, 0x88, 0x22, 
0xAA, 0xAA, 0x22, 0x4E, 0xDE, 0x8C, 0x7B, 0x00, 0x00, 0x05, 0x66, 0x49, 0x44, 0x41, 0x54, 0x58, 
0xC3, 0xDD, 0x98, 0x87, 0x57, 0xDA, 0x40, 0x18, 0xC0, 0xAD, 0x5D, 0x47, 0x2F, 0x69, 0xF5, 0x30, 
0x02, 0x32, 0xB5, 0x8C, 0x0A, 0x08, 0xB2, 0x44, 0x86, 0x28, 0xA8, 0x0C, 0x27, 0x68, 0x11, 0xA8, 
0xDB, 0x6A, 0xD5, 0x6A, 0xF7, 0xDE, 0x7B, 0xEF, 0xFF, 0xB8, 0x77, 0x47, 0x28, 0x2D, 0x02, 0x81, 
0x08, 0x7D, 0x7D, 0xFD, 0xF9, 0xE4, 0x91, 0xE4, 0x4B, 0x7E, 0xF7, 0x7D, 0x37, 0x48, 0xD2, 0x52, 
0x3B, 0xC7, 0x14, 0x05, 0x8E, 0xB4, 0x34, 0x87, 0x63, 0x31, 0xBB, 0x2F, 0x27, 0xE7, 0x89, 0x87, 
0x6C, 0xE3, 0x8D, 0x57, 0x5C, 0xF2, 0xCE, 0x58, 0x20, 0x28, 0x02, 0xA1, 0x63, 0x50, 0xAF, 0x6A, 
0xAC, 0xA2, 0x3B, 0x81, 0x40, 0x29, 0x90, 0x8B, 0xAC, 0xB4, 0x36, 0xCE, 0x11, 0xF3, 0x23, 0x50, 
0x16, 0x6E, 0xFA, 0x7C, 0x83, 0x14, 0xE3, 0x33, 0xB3, 0xB0, 0x58, 0x25, 0x04, 0x31, 0xC5, 0x6C, 
0xE4, 0xDE, 0xD6, 0x86, 0x38, 0x7A, 0x0A, 0xD7, 0x44, 0xF2, 0xEC, 0x6A, 0x1F, 0x65, 0x32, 0x11, 
0x2C, 0xEC, 0x34, 0x86, 0x8E, 0x34, 0xD0, 0x71, 0x2F, 0x63, 0x9B, 0xFF, 0xD5, 0x6A, 0xF5, 0xF9, 
0xDD, 0x11, 0x25, 0x6F, 0xF1, 0xCD, 0x1D, 0xD6, 0xA1, 0xE1, 0x1D, 0xFD, 0x6B, 0xD1, 0x92, 0x23, 
0x6A, 0x2B, 0xAF, 0x41, 0x99, 0x43, 0x5A, 0xCE, 0x53, 0x07, 0xBC, 0x97, 0xF1, 0x90, 0xAD, 0x83, 
0x1A, 0x44, 0x2D, 0xBE, 0xA3, 0x87, 0xCB, 0x83, 0xF6, 0x6E, 0x4F, 0xB4, 0xC2, 0x71, 0xC5, 0xF0, 
0x10, 0x09, 0x70, 0xEE, 0x1E, 0xC2, 0xD2, 0x3A, 0x02, 0xA9, 0xA3, 0xCA, 0x38, 0xB5, 0x29, 0x69, 
0xBF, 0x58, 0xC5, 0x4B, 0xAC, 0x4A, 0xEA, 0xA8, 0xB6, 0x80, 0xA8, 0xFB, 0x68, 0x2E, 0xF2, 0x5B, 
0x62, 0x1D, 0x3B, 0x9D, 0x00, 0xE3, 0xF0, 0x54, 0x8F, 0x9A, 0x44, 0xA4, 0x5B, 0x86, 0xC5, 0x4A, 
0x06, 0x69, 0xB1, 0x06, 0x05, 0xA2, 0x96, 0x22, 0xB4, 0x29, 0x31, 0x91, 0x33, 0xC4, 0x01, 0x30, 
0x1D, 0x26, 0xA1, 0xB8, 0x15, 0x8E, 0xC4, 0x85, 0xD5, 0xE2, 0x12, 0x21, 0x75, 0xE0, 0xBC, 0x82, 
0x71, 0x2A, 0x3F, 0x91, 0x28, 0x97, 0xC5, 0x38, 0xE6, 0x0D, 0x00, 0x13, 0x50, 0x09, 0x47, 0xAE, 
0xD0, 0xF1, 0x31, 0x2C, 0x7A, 0x68, 0x21, 0xDC, 0x23, 0x35, 0xA6, 0x12, 0x10, 0x53, 0xAF, 0x29, 
0xDA, 0x9F, 0x35, 0x2D, 0xE5, 0x77, 0x20, 0x99, 0x2B, 0x13, 0x22, 0x26, 0xE2, 0x3A, 0x91, 0xAC, 
0xD7, 0x14, 0xEB, 0x19, 0x25, 0x49, 0xF7, 0x89, 0x58, 0x51, 0x2C, 0xA4, 0xD0, 0x93, 0x35, 0xC5, 
0x2A, 0xE4, 0x24, 0x36, 0x2E, 0x42, 0xE2, 0x24, 0x63, 0x2B, 0x56, 0x47, 0x69, 0x3B, 0x8E, 0x88, 
0x94, 0x98, 0x6B, 0x0B, 0xEE, 0x26, 0x9D, 0xD2, 0x5F, 0xBF, 0x24, 0xA6, 0xAC, 0x47, 0x02, 0xC4, 
0x49, 0xA6, 0xC1, 0xFF, 0x22, 0x39, 0x5B, 0x7F, 0xB9, 0xFE, 0xD1, 0x8E, 0x17, 0x33, 0x84, 0xFF, 
0xCD, 0xC9, 0xA8, 0x1E, 0xA9, 0x7D, 0x59, 0xD1, 0x88, 0x5C, 0x56, 0xF8, 0x12, 0x18, 0xC6, 0x6B, 
0x5E, 0x20, 0x91, 0x57, 0x84, 0xC4, 0x5B, 0xFB, 0x52, 0x1F, 0xA6, 0xED, 0x31, 0x89, 0xFF, 0xD1, 
0x52, 0xD7, 0xD8, 0x1C, 0x28, 0xEE, 0x56, 0x62, 0x81, 0x14, 0x41, 0x69, 0x15, 0xEE, 0xBD, 0xB0, 
0xE8, 0x9F, 0x5F, 0xBE, 0x3B, 0x41, 0xD6, 0x24, 0x98, 0x08, 0x47, 0xE2, 0xFC, 0x15, 0x53, 0x16, 
0x2E, 0xB5, 0xF0, 0x2D, 0x91, 0x22, 0x42, 0x13, 0xF1, 0xB6, 0x88, 0xC3, 0x4C, 0x53, 0x71, 0x68, 
0x04, 0xAA, 0x8A, 0x48, 0x54, 0xA7, 0x4A, 0xA4, 0xA4, 0x9B, 0xCB, 0xDF, 0x6E, 0x57, 0x2D, 0x98, 
0x7E, 0x08, 0x10, 0x82, 0x13, 0x22, 0x1D, 0x46, 0x68, 0x11, 0xB4, 0xE8, 0x1D, 0x24, 0x04, 0x59, 
0xA0, 0x61, 0x42, 0x9C, 0x03, 0x5D, 0x9E, 0x08, 0x00, 0x42, 0x8F, 0xB9, 0xE2, 0xA3, 0x43, 0x10, 
0x60, 0x9C, 0x69, 0xEC, 0xC2, 0x16, 0x51, 0x8E, 0x25, 0x9D, 0x86, 0x5A, 0xE0, 0xA8, 0xCF, 0x53, 
0x36, 0x0D, 0xFE, 0x21, 0x28, 0xB3, 0x98, 0x5C, 0xE3, 0x80, 0x21, 0x5A, 0xAF, 0x23, 0x64, 0xC4, 
0x8F, 0x03, 0x2C, 0xAB, 0x5B, 0xCE, 0x97, 0x1C, 0xF6, 0xDB, 0x96, 0x4A, 0xEF, 0x99, 0xF4, 0x83, 
0xF9, 0x63, 0x68, 0x66, 0x8B, 0x65, 0x17, 0x87, 0x39, 0x30, 0x53, 0x57, 0xE7, 0xB7, 0x6A, 0x76, 
0x73, 0xB8, 0x48, 0xDD, 0xF6, 0x90, 0x3D, 0x1D, 0x47, 0x80, 0x22, 0x93, 0xFB, 0xA2, 0xEA, 0x13, 
0xBF, 0x22, 0x4C, 0xA1, 0x11, 0x23, 0x04, 0x14, 0xE7, 0xA0, 0xDD, 0x6E, 0x0F, 0xDD, 0x09, 0x62, 
0x5B, 0x4C, 0x5D, 0xEB, 0x72, 0xEF, 0x99, 0xEC, 0xA7, 0x0F, 0xD0, 0x90, 0x02, 0x8A, 0xDC, 0x4B, 
0x04, 0x56, 0xCF, 0x51, 0x16, 0x68, 0x44, 0x81, 0x62, 0xA0, 0xA5, 0x3F, 0xBB, 0x3A, 0x5F, 0xCB, 
0x14, 0x5C, 0xF8, 0x75, 0x3E, 0xE2, 0x38, 0x59, 0x9E, 0xE2, 0xCB, 0x02, 0x54, 0xF2, 0xB2, 0x80, 
0x1E, 0xC6, 0x61, 0x08, 0xF0, 0xA0, 0x84, 0x4D, 0xD0, 0x61, 0x0A, 0x23, 0xC0, 0x05, 0xFC, 0xFE, 
0x0E, 0x7C, 0x56, 0x47, 0xF7, 0xC4, 0x59, 0x8A, 0x3E, 0x02, 0x41, 0x59, 0x64, 0xBE, 0x65, 0x1A, 
0xB0, 0xAC, 0xBF, 0x8B, 0x23, 0x8C, 0x3D, 0x7E, 0x7F, 0x02, 0x81, 0x59, 0xBB, 0xD0, 0x23, 0x75, 
0x18, 0xC9, 0x22, 0x2B, 0x2A, 0xA9, 0x74, 0x69, 0x7A, 0x14, 0x22, 0xF9, 0x9A, 0x9A, 0x65, 0x24, 
0x12, 0x09, 0xB3, 0x73, 0x39, 0x87, 0x0E, 0x2A, 0xB8, 0xCE, 0x73, 0x6A, 0x96, 0x65, 0x19, 0x86, 
0xDD, 0xF6, 0x59, 0xF0, 0x74, 0xD2, 0xBB, 0xA5, 0xA9, 0xF9, 0x74, 0x02, 0x39, 0xAB, 0x5B, 0x5A, 
0x7D, 0x90, 0x1B, 0x56, 0xE9, 0x24, 0x0C, 0xC3, 0xA4, 0xA2, 0x33, 0x32, 0x20, 0x8B, 0xEB, 0xBB, 
0xF0, 0x35, 0x18, 0x56, 0xBA, 0x9D, 0xCE, 0xCE, 0xFE, 0xF9, 0x2A, 0x2A, 0x18, 0x39, 0xA7, 0xD2, 
0x51, 0x85, 0xC2, 0x16, 0x80, 0xC0, 0xB9, 0xB6, 0xC3, 0x4A, 0xF0, 0x89, 0xAE, 0xED, 0x38, 0x9C, 
0x0D, 0x55, 0x93, 0x9C, 0x93, 0xC1, 0xA9, 0x45, 0xD2, 0x76, 0x12, 0xAE, 0xB2, 0xCB, 0x71, 0x09, 
0xA6, 0xB7, 0x5D, 0x2C, 0xC1, 0xA5, 0x3E, 0x1B, 0xCA, 0xC8, 0x0D, 0x06, 0x83, 0xD2, 0x82, 0x5F, 
0xAA, 0xE5, 0x86, 0xED, 0x9A, 0x2E, 0xAC, 0xC0, 0xA4, 0xCC, 0x11, 0x19, 0x30, 0x8E, 0x58, 0x53, 
0xF4, 0x3C, 0xBC, 0xC3, 0x33, 0x04, 0x82, 0x9A, 0x2A, 0x9D, 0xDE, 0x09, 0x82, 0x1E, 0xDC, 0xB6, 
0xBC, 0x84, 0x75, 0x99, 0x33, 0x16, 0x80, 0x72, 0xD6, 0x45, 0x52, 0x13, 0xFC, 0xC7, 0x5E, 0x9C, 
0x9B, 0x9B, 0x53, 0x58, 0x63, 0x5B, 0x5B, 0x5B, 0x73, 0x49, 0x1C, 0x46, 0x76, 0xEB, 0x34, 0x53, 
0xA3, 0x10, 0x1A, 0x6C, 0x6E, 0x96, 0xCD, 0x4B, 0x18, 0x26, 0x39, 0x0D, 0xE1, 0x5A, 0x65, 0x89, 
0x95, 0x03, 0xFE, 0x45, 0x3E, 0x9A, 0x21, 0x17, 0xBE, 0x78, 0x36, 0x8B, 0x80, 0xF3, 0xEE, 0x84, 
0x8B, 0x61, 0xC8, 0x0E, 0xBE, 0xAD, 0x64, 0x83, 0xC1, 0x9F, 0x44, 0xDB, 0xD7, 0x01, 0x81, 0xF2, 
0xAE, 0xC9, 0xC5, 0x14, 0x25, 0x24, 0x15, 0x7F, 0xE5, 0x79, 0xD9, 0x07, 0x91, 0x4D, 0xC7, 0x27, 
0x82, 0xC1, 0x9F, 0x3A, 0xFC, 0xCE, 0x0E, 0x80, 0xA1, 0xD5, 0xF9, 0x2E, 0x8C, 0xBB, 0xAB, 0x80, 
0xDB, 0x4D, 0xFF, 0xDD, 0x9E, 0x29, 0x0E, 0xA0, 0xB0, 0x57, 0x4D, 0xAC, 0x7C, 0x95, 0xF1, 0xD7, 
0x94, 0x0F, 0xCC, 0x8E, 0x57, 0xEE, 0x12, 0x88, 0xF4, 0x92, 0x12, 0x74, 0x9E, 0xCB, 0x4A, 0x80, 
0xE4, 0x1D, 0x65, 0x19, 0x82, 0xD0, 0xB1, 0xA0, 0x60, 0x4B, 0x4F, 0x19, 0x84, 0xB3, 0xA6, 0xBA, 
0x24, 0x78, 0xF0, 0x84, 0x41, 0x65, 0x1C, 0x21, 0x29, 0x73, 0xA0, 0x5D, 0x0B, 0xC0, 0x52, 0x9F, 
0x84, 0xED, 0xC2, 0x4B, 0xDF, 0x68, 0x67, 0x59, 0x22, 0x3D, 0x4A, 0x38, 0xB4, 0xE2, 0x3A, 0x20, 
0x99, 0x04, 0xD5, 0x32, 0x41, 0xD0, 0xAE, 0x2B, 0x71, 0x98, 0xE3, 0x1C, 0x70, 0xE8, 0x2F, 0x4A, 
0xCB, 0xE2, 0x5E, 0x35, 0x82, 0x51, 0x9B, 0x8A, 0xF4, 0x5E, 0x31, 0x75, 0x89, 0x22, 0x5B, 0x2D, 
0x13, 0x93, 0x01, 0x04, 0x14, 0x7C, 0x17, 0xD2, 0x61, 0xCB, 0xBA, 0xA2, 0x09, 0x80, 0x66, 0xA2, 
0xD8, 0x5C, 0x1E, 0x69, 0xDA, 0x00, 0xB9, 0xF8, 0x25, 0x12, 0xCA, 0x9F, 0x86, 0x89, 0x3A, 0xC1, 
0x7A, 0x95, 0xD7, 0x9F, 0xEB, 0x40, 0x66, 0x73, 0xF1, 0x63, 0x91, 0xE0, 0xEE, 0xCE, 0x41, 0xD9, 
0x34, 0x6E, 0x69, 0x25, 0x98, 0xA4, 0xA6, 0x13, 0xC2, 0x88, 0x37, 0x59, 0x90, 0xE0, 0x26, 0x4A, 
0x7D, 0xB0, 0xEA, 0xDD, 0x9A, 0x19, 0xA7, 0xB2, 0xA3, 0x93, 0x14, 0x26, 0xE3, 0xD2, 0xA4, 0x0C, 
0xC8, 0xD3, 0x2A, 0xB6, 0x92, 0x84, 0x46, 0xDD, 0x0A, 0x73, 0xC0, 0x62, 0x4B, 0x32, 0xBC, 0x84, 
0x4D, 0xED, 0x1A, 0xC1, 0x48, 0xB9, 0x9B, 0xB0, 0xE3, 0xED, 0xED, 0xED, 0xDA, 0x76, 0xAD, 0xF6, 
0xCD, 0xF7, 0xFD, 0xBD, 0x57, 0x9F, 0xB5, 0xED, 0x18, 0xBC, 0xF5, 0xE9, 0xD5, 0xDE, 0xFE, 0xEB, 
0x2F, 0x1B, 0x5A, 0x2D, 0xDE, 0x51, 0x01, 0x2D, 0xE6, 0xC3, 0xB7, 0xBD, 0xFD, 0x1F, 0x5F, 0xDF, 
0xE6, 0xA3, 0xB4, 0x1B, 0x2F, 0x5F, 0xEF, 0xEF, 0xBD, 0xDC, 0xF8, 0x2D, 0x86, 0x77, 0xDC, 0xFF, 
0xF8, 0xA8, 0xAD, 0xED, 0x51, 0x1B, 0xE6, 0xC9, 0xC0, 0xC0, 0xC0, 0xF3, 0x36, 0x9E, 0xE7, 0x78, 
0xE3, 0xC5, 0xC3, 0x36, 0x41, 0x1E, 0xDF, 0x1E, 0x18, 0xB8, 0xFD, 0x84, 0xDF, 0x78, 0xF8, 0x02, 
0x6F, 0x3C, 0x6E, 0x2B, 0xF2, 0xEC, 0x29, 0x75, 0x5C, 0xBD, 0x79, 0x61, 0xAC, 0xB7, 0xF7, 0x4A, 
0xEF, 0xA9, 0x26, 0xD0, 0x3B, 0x76, 0xFA, 0xC6, 0x75, 0x22, 0x79, 0xF0, 0xEE, 0x0A, 0x96, 0x50, 
0x47, 0x13, 0x24, 0x63, 0xD7, 0xEE, 0xE7, 0x33, 0x39, 0x7D, 0x65, 0xAC, 0x39, 0x1A, 0x3E, 0x13, 
0xC2, 0xD3, 0x67, 0x37, 0xAE, 0x5D, 0xC0, 0x9C, 0x6E, 0x02, 0xD7, 0x6E, 0xBE, 0x3F, 0xD9, 0x42, 
0xD9, 0xB8, 0xBE, 0x79, 0x66, 0x73, 0xF3, 0x4C, 0x13, 0xD8, 0x7C, 0x70, 0xB5, 0xE5, 0x6F, 0xF1, 
0x13, 0x35, 0x7D, 0x1D, 0x08, 0x97, 0x5D, 0x27, 0x19, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 
0x44, 0xAE, 0x42, 0x60, 0x82
};
const int sizeof_hover_rear = sizeof(hover_rear);
